{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Parameter estimation by optimization\n",
    "When doing statistical inference, we speak the language of probability. A probability distribution that describes your data has parameters. So, a major goal of statistical inference is to estimate the values of these parameters, which allows us to concisely and unambiguously describe our data and draw conclusions from it. In this chapter, you will learn how to find the optimal parameters, those that best describe your data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### How often do we get no-hitters?\n",
    "The number of games played between each no-hitter in the modern era (1901-2015) of Major League Baseball is stored in the array nohitter_times.\n",
    "\n",
    "If you assume that no-hitters are described as a Poisson process, then the time between no-hitters is Exponentially distributed. As you have seen, the Exponential distribution has a single parameter, which we will call , the typical interval time. The value of the parameter  that makes the exponential distribution best match the data is the mean interval time (where time is in units of number of games) between no-hitters.\n",
    "\n",
    "Compute the value of this parameter from the data. Then, use np.random.exponential() to \"repeat\" the history of Major League Baseball by drawing inter-no-hitter times from an exponential distribution with the  you found and plot the histogram as an approximation to the PDF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from test import ecdf ##Importing the ecdf function from test.py script\n",
    "import seaborn as sns\n",
    "sns.set()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "nohitter_times = np.array([ 843, 1613, 1101,  215,  684,  814,  278,  324,  161,  219,  545,\n",
    "        715,  966,  624,   29,  450,  107,   20,   91, 1325,  124, 1468,\n",
    "        104, 1309,  429,   62, 1878, 1104,  123,  251,   93,  188,  983,\n",
    "        166,   96,  702,   23,  524,   26,  299,   59,   39,   12,    2,\n",
    "        308, 1114,  813,  887,  645, 2088,   42, 2090,   11,  886, 1665,\n",
    "       1084, 2900, 2432,  750, 4021, 1070, 1765, 1322,   26,  548, 1525,\n",
    "         77, 2181, 2752,  127, 2147,  211,   41, 1575,  151,  479,  697,\n",
    "        557, 2267,  542,  392,   73,  603,  233,  255,  528,  397, 1529,\n",
    "       1023, 1194,  462,  583,   37,  943,  996,  480, 1497,  717,  224,\n",
    "        219, 1531,  498,   44,  288,  267,  600,   52,  269, 1086,  386,\n",
    "        176, 2199,  216,   54,  675, 1243,  463,  650,  171,  327,  110,\n",
    "        774,  509,    8,  197,  136,   12, 1124,   64,  380,  811,  232,\n",
    "        192,  731,  715,  226,  605,  539, 1491,  323,  240,  179,  702,\n",
    "        156,   82, 1397,  354,  778,  603, 1001,  385,  986,  203,  149,\n",
    "        576,  445,  180, 1403,  252,  675, 1351, 2983, 1568,   45,  899,\n",
    "       3260, 1025,   31,  100, 2055, 4043,   79,  238, 3931, 2351,  595,\n",
    "        110,  215,    0,  563,  206,  660,  242,  577,  179,  157,  192,\n",
    "        192, 1848,  792, 1693,   55,  388,  225, 1134, 1172, 1555,   31,\n",
    "       1582, 1044,  378, 1687, 2915,  280,  765, 2819,  511, 1521,  745,\n",
    "       2491,  580, 2072, 6450,  578,  745, 1075, 1103, 1549, 1520,  138,\n",
    "       1202,  296,  277,  351,  391,  950,  459,   62, 1056, 1128,  139,\n",
    "        420,   87,   71,  814,  603, 1349,  162, 1027,  783,  326,  101,\n",
    "        876,  381,  905,  156,  419,  239,  119,  129,  467])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Seed random number generator\n",
    "np.random.seed(42)\n",
    "\n",
    "# Compute mean no-hitter time: tau\n",
    "tau = np.mean(nohitter_times)\n",
    "\n",
    "# Draw out of an exponential distribution with parameter tau: inter_nohitter_time\n",
    "inter_nohitter_time = np.random.exponential(tau, 100000)\n",
    "\n",
    "# Plot the PDF and label axes\n",
    "_= plt.hist(inter_nohitter_time,\n",
    "             bins = 50, density = True, histtype = 'step')\n",
    "_= plt.xlabel('Games between no-hitters')\n",
    "_ = plt.ylabel('PDF')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see the typical shape of the Exponential distribution, going from a maximum at 0 and decaying to the right."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Do the data follow our story?\n",
    "You have modeled no-hitters using an Exponential distribution. Create an ECDF of the real data. Overlay the theoretical CDF with the ECDF from the data. This helps you to verify that the Exponential distribution describes the observed data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create an ECDF from real data: x, y\n",
    "x, y = ecdf(nohitter_times)\n",
    "\n",
    "# Create a CDF from theoretical samples: x_theor, y_theor\n",
    "x_theor, y_theor = ecdf(inter_nohitter_time)\n",
    "\n",
    "# Overlay the plots\n",
    "plt.plot(x_theor, y_theor)\n",
    "plt.plot(x, y, marker= '.', linestyle= 'none')\n",
    "\n",
    "# Margins and axis labels\n",
    "plt.margins(0.02)\n",
    "plt.xlabel('Games between no-hitters')\n",
    "plt.ylabel('CDF')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks like no-hitters in the modern era of Major League Baseball are Exponentially distributed. Based on the story of the Exponential distribution, this suggests that they are a random process; when a no-hitter will happen is independent of when the last no-hitter was."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### How is this parameter optimal?\n",
    "Now sample out of an exponential distribution with  being twice as large as the optimal . Do it again for  half as large. Make CDFs of these samples and overlay them with your data. You can see that they do not reproduce the data as well. Thus, the  you computed from the mean inter-no-hitter times is optimal in that it best reproduces the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "tau = 763.0358565737051"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the theoretical CDFs\n",
    "plt.plot(x_theor, y_theor)\n",
    "plt.plot(x, y, marker='.', linestyle='none')\n",
    "plt.margins(0.02)\n",
    "plt.xlabel('Games between no-hitters')\n",
    "plt.ylabel('CDF')\n",
    "\n",
    "# Take samples with half tau: samples_half\n",
    "samples_half = np.random.exponential(tau/2, size = 10000)\n",
    "\n",
    "# Take samples with double tau: samples_double\n",
    "samples_double = np.random.exponential(tau * 2, size = 10000)\n",
    "\n",
    "# Generate CDFs from these samples\n",
    "x_half, y_half = ecdf(samples_half)\n",
    "x_double, y_double = ecdf(samples_double)\n",
    "\n",
    "# Plot these CDFs as lines\n",
    "_ = plt.plot(x_half, y_half)\n",
    "_ = plt.plot(x_double, y_double)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice how the value of tau given by the mean matches the data best. In this way, tau is an optimal parameter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linear Regression By Least Squares\n",
    "Sometimes two variables are related. You may recall from the prequel to this course that we computed the Pearson correlation coefficient between Obama's vote share in each county in swings states and the total vote count of the respective counties. The Pearson correlation coefficient is important to compute, but we might like to get a fuller understanding of how the data are related to each other. Specifically, we might suspect some underlying function gives the data its shape. Often times a linear function is appropriate to describe the data. The parameters of the function are the slope and intercept. The slope sets how steep the line is, and the intercept sets where the line crosses the y-axis. How do we figure out which slope and intercept best describe the data? A simple answer is that we want to choose the slope and intercept such that the data points collectively lie as close as possible to the line. This is easiest to think about by first considering one data point. The vertical distance between the data point and the line is called the residual. In this case, the residual has a negative value because the data point lies below the line. Each data point has a residual associated with it. We define the line that is closest to the data to be the line for which the sum of the squares of all of the residuals is minimal. This process, finding the parameters for which the sum of the squares of the residuals is minimal, is called \"least squares\". There are many algorithms to do this in practice. We will use the Numpy function polyfit, which performs least squares analysis with polynomial functions. We can use it because a linear function is a first degree polynomial. The first two arguments to this function are the x and y data. The third argument is the degree of the polynomial you wish to fit; for linear functions, we enter one. The function returns the slope and intercept of the best fit line. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### EDA of literacy/fertility data\n",
    "we will look at the correlation between female literacy and fertility (defined as the average number of children born per woman) throughout the world. For ease of analysis and interpretation, we will work with the illiteracy rate.\n",
    "\n",
    "It is always a good idea to do some EDA ahead of our analysis. To this end, plot the fertility versus illiteracy and compute the Pearson correlation coefficient. The Numpy array illiteracy has the illiteracy rate among females for most of the world's nations. The array fertility has the corresponding fertility data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "fertility = np.array([1.769, 2.682, 2.077, 2.132, 1.827, 3.872, 2.288, 5.173, 1.393,\n",
    "       1.262, 2.156, 3.026, 2.033, 1.324, 2.816, 5.211, 2.1  , 1.781,\n",
    "       1.822, 5.908, 1.881, 1.852, 1.39 , 2.281, 2.505, 1.224, 1.361,\n",
    "       1.468, 2.404, 5.52 , 4.058, 2.223, 4.859, 1.267, 2.342, 1.579,\n",
    "       6.254, 2.334, 3.961, 6.505, 2.53 , 2.823, 2.498, 2.248, 2.508,\n",
    "       3.04 , 1.854, 4.22 , 5.1  , 4.967, 1.325, 4.514, 3.173, 2.308,\n",
    "       4.62 , 4.541, 5.637, 1.926, 1.747, 2.294, 5.841, 5.455, 7.069,\n",
    "       2.859, 4.018, 2.513, 5.405, 5.737, 3.363, 4.89 , 1.385, 1.505,\n",
    "       6.081, 1.784, 1.378, 1.45 , 1.841, 1.37 , 2.612, 5.329, 5.33 ,\n",
    "       3.371, 1.281, 1.871, 2.153, 5.378, 4.45 , 1.46 , 1.436, 1.612,\n",
    "       3.19 , 2.752, 3.35 , 4.01 , 4.166, 2.642, 2.977, 3.415, 2.295,\n",
    "       3.019, 2.683, 5.165, 1.849, 1.836, 2.518, 2.43 , 4.528, 1.263,\n",
    "       1.885, 1.943, 1.899, 1.442, 1.953, 4.697, 1.582, 2.025, 1.841,\n",
    "       5.011, 1.212, 1.502, 2.516, 1.367, 2.089, 4.388, 1.854, 1.748,\n",
    "       2.978, 2.152, 2.362, 1.988, 1.426, 3.29 , 3.264, 1.436, 1.393,\n",
    "       2.822, 4.969, 5.659, 3.24 , 1.693, 1.647, 2.36 , 1.792, 3.45 ,\n",
    "       1.516, 2.233, 2.563, 5.283, 3.885, 0.966, 2.373, 2.663, 1.251,\n",
    "       2.052, 3.371, 2.093, 2.   , 3.883, 3.852, 3.718, 1.732, 3.928])\n",
    "\n",
    "illiteracy = np.array([ 9.5, 49.2,  1. , 11.2,  9.8, 60. , 50.2, 51.2,  0.6,  1. ,  8.5,\n",
    "        6.1,  9.8,  1. , 42.2, 77.2, 18.7, 22.8,  8.5, 43.9,  1. ,  1. ,\n",
    "        1.5, 10.8, 11.9,  3.4,  0.4,  3.1,  6.6, 33.7, 40.4,  2.3, 17.2,\n",
    "        0.7, 36.1,  1. , 33.2, 55.9, 30.8, 87.4, 15.4, 54.6,  5.1,  1.1,\n",
    "       10.2, 19.8,  0. , 40.7, 57.2, 59.9,  3.1, 55.7, 22.8, 10.9, 34.7,\n",
    "       32.2, 43. ,  1.3,  1. ,  0.5, 78.4, 34.2, 84.9, 29.1, 31.3, 18.3,\n",
    "       81.8, 39. , 11.2, 67. ,  4.1,  0.2, 78.1,  1. ,  7.1,  1. , 29. ,\n",
    "        1.1, 11.7, 73.6, 33.9, 14. ,  0.3,  1. ,  0.8, 71.9, 40.1,  1. ,\n",
    "        2.1,  3.8, 16.5,  4.1,  0.5, 44.4, 46.3, 18.7,  6.5, 36.8, 18.6,\n",
    "       11.1, 22.1, 71.1,  1. ,  0. ,  0.9,  0.7, 45.5,  8.4,  0. ,  3.8,\n",
    "        8.5,  2. ,  1. , 58.9,  0.3,  1. , 14. , 47. ,  4.1,  2.2,  7.2,\n",
    "        0.3,  1.5, 50.5,  1.3,  0.6, 19.1,  6.9,  9.2,  2.2,  0.2, 12.3,\n",
    "        4.9,  4.6,  0.3, 16.5, 65.7, 63.5, 16.8,  0.2,  1.8,  9.6, 15.2,\n",
    "       14.4,  3.3, 10.6, 61.3, 10.9, 32.2,  9.3, 11.6, 20.7,  6.5,  6.7,\n",
    "        3.5,  1. ,  1.6, 20.5,  1.5, 16.7,  2. ,  0.9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pearson_r(x, y):\n",
    "    \"\"\"Compute Pearson correlation coefficient between two arrays.\"\"\"\n",
    "    # Compute correlation matrix: corr_mat\n",
    "    corr_mat = np.corrcoef(x, y)\n",
    "\n",
    "    # Return entry [0,1]\n",
    "    return corr_mat[0,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8041324026815341\n"
     ]
    }
   ],
   "source": [
    "# Plot the illiteracy rate versus fertility\n",
    "_ = plt.plot(illiteracy, fertility, marker = '.', linestyle = 'none')\n",
    "\n",
    "# Set the margins and label axes\n",
    "plt.margins(0.02)\n",
    "_ = plt.xlabel('percent illiterate')\n",
    "_ = plt.ylabel('fertility')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Show the Pearson correlation coefficient\n",
    "print(pearson_r(illiteracy, fertility))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see the correlation between illiteracy and fertility by eye, and by the substantial Pearson correlation coefficient of 0.8. It is difficult to resolve in the scatter plot, but there are many points around near-zero illiteracy and about 1.8 children/woman."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linear regression\n",
    "We will assume that fertility is a linear function of the female illiteracy rate. That is, $ f = ai + b $ , where $ a $ is the slope and $ b $ is the intercept. We can think of the intercept as the minimal fertility rate, probably somewhere between one and two. The slope tells us how the fertility rate varies with illiteracy. We can find the best fit line using np.polyfit()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "slope = 0.04979854809063423 children per woman / percent illiterate\n",
      "intercept = 1.888050610636557 children per woman\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the illiteracy rate versus fertility\n",
    "_ = plt.plot(illiteracy, fertility, marker='.', linestyle='none')\n",
    "plt.margins(0.02)\n",
    "_ = plt.xlabel('percent illiterate')\n",
    "_ = plt.ylabel('fertility')\n",
    "\n",
    "# Perform a linear regression using np.polyfit(): a, b\n",
    "a, b = np.polyfit(illiteracy, fertility, 1)\n",
    "\n",
    "# Print the results to the screen\n",
    "print('slope =', a, 'children per woman / percent illiterate')\n",
    "print('intercept =', b, 'children per woman')\n",
    "\n",
    "# Make theoretical line to plot\n",
    "x = np.array([0, 100])\n",
    "y = a * x + b\n",
    "\n",
    "# Add regression line to your plot\n",
    "_ = plt.plot(x, y)\n",
    "\n",
    "# Draw the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### How is it optimal?\n",
    "The function np.polyfit() that you used to get your regression parameters finds the optimal slope and intercept. It is optimizing the sum of the squares of the residuals, also known as RSS (for residual sum of squares). In this exercise, you will plot the function that is being optimized, the RSS, versus the slope parameter a. To do this, fix the intercept to be what you found in the optimization. Then, plot the RSS vs. the slope. Where is it minimal?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Specify slopes to consider: a_vals\n",
    "a_vals = np.linspace(0, 0.1, 200)\n",
    "\n",
    "# Initialize sum of square of residuals: rss\n",
    "rss = np.empty_like(a_vals)\n",
    "\n",
    "# Compute sum of square of residuals for each value of a_vals\n",
    "for i, a in enumerate(a_vals):\n",
    "    rss[i] = np.sum((fertility - a * illiteracy - b)**2)\n",
    "\n",
    "# Plot the RSS\n",
    "plt.plot(a_vals, rss, '-')\n",
    "plt.xlabel('slope (children per woman / percent illiterate)')\n",
    "plt.ylabel('sum of square of residuals')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the minimum on the plot, that is the value of the slope that gives the minimum sum of the square of the residuals, is the same value you got when performing the regression."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linear regression on appropriate Anscombe data\n",
    "For practice, perform a linear regression on the data set from Anscombe's quartet that is most reasonably interpreted with linear regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ascombe data\n",
    "x = np.array([10.,  8., 13.,  9., 11., 14.,  6.,  4., 12.,  7.,  5.])\n",
    "y = np.array([ 8.04,  6.95,  7.58,  8.81,  8.33,  9.96,  7.24,  4.26, 10.84,\n",
    "        4.82,  5.68])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5000909090909095 3.0000909090909076\n"
     ]
    },
    {
     "data": {
      "image/png": "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GZKenh6Vlpaqra1NktTQ0KCysjJNnz5dNTU1htMNzo2zvPzyyyotLVVZWZl+9rOf6cqVK4YTDsyNc1y1adMmPfbYY4ZSDQ0FEEWJsMX1qVOnVFVVpdraWu3atUtHjhzRvn37TMcatEuXLqm6ulobN27Uzp07dfDgQTU0NJiONShNTU2qrKxUa2urJOny5ctauXKlamtrtWfPHh0+fDhufjc3znL8+HGtX79eL730knbt2iXHcbR582azIQfgxjmuamlp0Ysvvmgm1DBQAFGSKFtcv/HGG3r00UeVlZWl5ORk1dTUqLCw0HSsQQuHw3IcR5cuXVIoFFIoFFJKSorpWIOydetWVVVVady4cZKk5uZm3XXXXRo/frySkpJUVlam119/3XDKgblxlttuu01VVVVKS0uTx+PRPffco9OnTxtOeWs3ziFJV65c0erVq7V06VKDyYaGvwkcJcPZ4jqWnDhxQsnJyVq0aJHOnDmjBx54QMuXLzcda9DS0tK0bNkylZSUaNSoUbr//vt13333mY41KNXV1dcdnz17VoFA4NrxuHHj1NHR4XasIblxluzsbGVnZ0uSzp07p7/85S/65S9/aSLaoNw4hyQ9//zzmj17tnJycgwkGh6uAKLgk1tcx7twOKzGxkY9++yzevnll9Xc3ByXy1pHjx7V9u3btXfvXu3fv19er1fr1683HWtYHMeRx+O5dhyJRK47jkcdHR369re/rdmzZ+srX/mK6TiD9tZbb+nMmTOaPXu26ShDQgFEwZ49e/TWW2+pvLxcv/nNb1RfX69nn33WdKwhGTt2rIqLizVmzBjdfvvtmjZtmpqbm03HGrQDBw6ouLhYfr9ft912myoqKvT222+bjjUsWVlZCgaD146DweB1SxHx5r333tO8efP0jW98Q4sXLzYdZ0h2796td999V+Xl5Vq1apUOHz4cV1fMLAFFwYYNG67999UtruP17xtMnTpVP/nJT3ThwgWNHj1a+/fv14MPPmg61qAVFBRo3bp16u3t1ahRo1RfX68JEyaYjjUshYWFOn78uE6cOKGcnBzt3r07bt959vT06Pvf/76WL1+uWbNmmY4zZJ9ctvrnP/+p3/72t3rhhRfMBRokCgDXKSws1IIFCzR//nz19/dr0qRJcfkiM3nyZB05ckQVFRVKTk7WhAkTtHDhQtOxhiUlJUVr1qzRkiVL1NfXpylTpuiRRx4xHWtIXnnlFX3wwQfasGHDtTdQX//617Vs2TLDyezCdtAAYCnuAQCApSgAALAUBQAAlqIAAMBSFAAAWIoCAABLUQAAYCkKABiiHTt2aNq0afrwww/V29urkpISvfrqq6ZjAQPGg2DAMPz4xz9Wenq6rly5Ip/Pp6efftp0JGDAKABgGHp6elReXq7bb79ddXV1cfc3B2A3loCAYejs7FRfX58uXLigs2fPmo4DDApXAMAQ9ff3a968eZo3b54cx9G2bdu0ZcsWJScnm44GDAhXAMAQ/epXv9LYsWM1d+5cffOb31RmZmbc/aF22I0rAACwFFcAAGApCgAALEUBAIClKAAAsBQFAACWogAAwFIUAABYigIAAEv9P8iQImeg2W+yAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Perform linear regression: a, b\n",
    "a, b = np.polyfit(x, y, 1)\n",
    "\n",
    "# Print the slope and intercept\n",
    "print(a, b)\n",
    "\n",
    "# Generate theoretical x and y data: x_theor, y_theor\n",
    "x_theor = np.array([3, 15])\n",
    "y_theor = x_theor * a + b\n",
    "\n",
    "# Plot the Anscombe data and theoretical line\n",
    "_ = plt.plot(x, y, marker = '.', linestyle = 'none')\n",
    "_ = plt.plot(x_theor, y_theor, marker = '.', linestyle = 'none')\n",
    "\n",
    "# Label the axes\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linear regression on all Anscombe data\n",
    "Now, to verify that all four of the Anscombe data sets have the same slope and intercept from a linear regression, you will compute the slope and intercept for each set. The data are stored in lists; anscombe_x = [x1, x2, x3, x4] and anscombe_y = [y1, y2, y3, y4], where, for example, x2 and y2 are the  and  values for the second Anscombe data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "anscombe_x = [np.array([10.,  8., 13.,  9., 11., 14.,  6.,  4., 12.,  7.,  5.]),\n",
    "              np.array([10.,  8., 13.,  9., 11., 14.,  6.,  4., 12.,  7.,  5.]),\n",
    "              np.array([10.,  8., 13.,  9., 11., 14.,  6.,  4., 12.,  7.,  5.]),\n",
    "              np.array([ 8.,  8.,  8.,  8.,  8.,  8.,  8., 19.,  8.,  8.,  8.])]\n",
    "\n",
    "anscombe_y = [np.array([ 8.04,  6.95,  7.58,  8.81,  8.33,  9.96,  7.24,  4.26, 10.84, 4.82,  5.68]),\n",
    "              np.array([9.14, 8.14, 8.74, 8.77, 9.26, 8.1 , 6.13, 3.1 , 9.13, 7.26, 4.74]),\n",
    "              np.array([ 7.46,  6.77, 12.74,  7.11,  7.81,  8.84,  6.08,  5.39,  8.15, 6.42,  5.73]),\n",
    "              np.array([ 6.58,  5.76,  7.71,  8.84,  8.47,  7.04,  5.25, 12.5 ,  5.56, 7.91,  6.89])]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "slope: 0.5000909090909095 intercept: 3.0000909090909076\n",
      "slope: 0.5000000000000004 intercept: 3.000909090909089\n",
      "slope: 0.4997272727272731 intercept: 3.0024545454545453\n",
      "slope: 0.49990909090909064 intercept: 3.0017272727272735\n"
     ]
    }
   ],
   "source": [
    "# Iterate through x,y pairs\n",
    "for x, y in zip(anscombe_x, anscombe_y):\n",
    "    # Compute the slope and intercept: a, b\n",
    "    a, b = np.polyfit(x, y, 1)\n",
    "\n",
    "    # Print the result\n",
    "    print('slope:', a, 'intercept:', b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Indeed, they all have the same slope and intercept."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Bootstrap confidence intervals\n",
    "To \"pull yourself up by your bootstraps\" is a classic idiom meaning that you achieve a difficult task by yourself with no help at all. In statistical inference, you want to know what would happen if you could repeat your data acquisition an infinite number of times. This task is impossible, but can we use only the data we actually have to get close to the same result as an infinitude of experiments? The answer is yes! The technique to do it is aptly called bootstrapping."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Generating Bootstrap Replicates\n",
    "In '1_Statistical_Thinking' we computed summary statistics of measurements, including the mean, median, and standard deviation. But remember, we need to think probabilistically. What if we acquired the data again? Would we get the same mean? The same median? The same standard deviation? Probably not. In inference problems, it is rare that we are interested in the result from a single experiment or data acquisition. We want to say something more general. Michelson was not interested in what the measured speed of light was in the specific 100 measurements conducted in the summer of 1879. He wanted to know what the speed of light actually is. Statistically speaking, that means he wanted to know what speed of light he would observe if he did the experiment over and over again an infinite number of times. Unfortunately, actually repeating the experiment lots and lots of times is just not possible. But, as hackers, we can simulate getting the data again. The idea is that we resample the data we have and recompute the summary statistic of interest, say the mean. To resample an array of measurements, we randomly select one entry and store it. Importantly, we replace the entry in the original array, or equivalently, we just don't delete it. This is called sampling with replacement. Then, we then randomly select another one and store it. We do this n times, where n is the total number of measurements. We then have a resampled array of data. Using this new resampled array, we compute the summary statistic and store the result. Resampling the speed of light data is as if we repeated Michelson's set of measurements. We do this over and over again to get a large number of summary statistics from resampled data sets. We can use these results to plot an ECDF, for example, to get a picture of the probability distribution describing the summary statistic. This process is an example of bootstrapping, which more generally is the use of resampled data to perform statistical inference. To make sure we have our terminology down, each resampled array is called a bootstrap sample. A bootstrap replicate is the value of the summary statistic computed from the bootstrap sample. The name makes sense; it's a simulated replica of the original data acquired by bootstrapping. Let's look at how we can generate a bootstrap sample and compute a bootstrap replicate from it using Python. We will use Michelson's measurements of the speed of light.First, we need a function to perform the resampling. The Numpy function random dot choice provides this functionality. Conveniently, like many of the other functions in the Numpy random module, it has a size keyword argument, which allows us to specify how many samples we want to take out of the array. Notice that it chose the number five three times; the function does not delete an entry when it samples it out of the array. Now, we can draw 100 samples out of the Michelson speed of light data. This is a bootstrap sample, since there were 100 data points and we are choosing 100 of them with replacement. Now that we have a bootstrap sample, we can compute a bootstrap replicate. We can pick whatever summary statistic we like. We'll compute the mean, median, and standard deviation. It's as simple as treating the bootstrap sample as though it were a data set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Visualizing bootstrap samples\n",
    "In this exercise, you will generate bootstrap samples from the set of annual rainfall data measured at the Sheffield Weather Station in the UK from 1883 to 2015. The data are stored in the NumPy array rainfall in units of millimeters (mm). By graphically displaying the bootstrap samples with an ECDF, you can get a feel for how bootstrap sampling allows probabilistic descriptions of data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "rainfall = np.array([ 875.5,  648.2,  788.1,  940.3,  491.1,  743.5,  730.1,  686.5,\n",
    "        878.8,  865.6,  654.9,  831.5,  798.1,  681.8,  743.8,  689.1,\n",
    "        752.1,  837.2,  710.6,  749.2,  967.1,  701.2,  619. ,  747.6,\n",
    "        803.4,  645.6,  804.1,  787.4,  646.8,  997.1,  774. ,  734.5,\n",
    "        835. ,  840.7,  659.6,  828.3,  909.7,  856.9,  578.3,  904.2,\n",
    "        883.9,  740.1,  773.9,  741.4,  866.8,  871.1,  712.5,  919.2,\n",
    "        927.9,  809.4,  633.8,  626.8,  871.3,  774.3,  898.8,  789.6,\n",
    "        936.3,  765.4,  882.1,  681.1,  661.3,  847.9,  683.9,  985.7,\n",
    "        771.1,  736.6,  713.2,  774.5,  937.7,  694.5,  598.2,  983.8,\n",
    "        700.2,  901.3,  733.5,  964.4,  609.3, 1035.2,  718. ,  688.6,\n",
    "        736.8,  643.3, 1038.5,  969. ,  802.7,  876.6,  944.7,  786.6,\n",
    "        770.4,  808.6,  761.3,  774.2,  559.3,  674.2,  883.6,  823.9,\n",
    "        960.4,  877.8,  940.6,  831.8,  906.2,  866.5,  674.1,  998.1,\n",
    "        789.3,  915. ,  737.1,  763. ,  666.7,  824.5,  913.8,  905.1,\n",
    "        667.8,  747.4,  784.7,  925.4,  880.2, 1086.9,  764.4, 1050.1,\n",
    "        595.2,  855.2,  726.9,  785.2,  948.8,  970.6,  896. ,  618.4,\n",
    "        572.4, 1146.4,  728.2,  864.2,  793. ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for _ in range(50):\n",
    "    # Generate bootstrap sample: bs_sample\n",
    "    bs_sample = np.random.choice(rainfall, size = len(rainfall))\n",
    "\n",
    "    # Compute and plot ECDF from bootstrap sample\n",
    "    x, y = ecdf(bs_sample)\n",
    "    _ = plt.plot(x, y, marker ='.', linestyle ='none',\n",
    "                 color = 'gray', alpha =0.1)\n",
    "\n",
    "# Compute and plot ECDF from original data\n",
    "x, y = ecdf(rainfall)\n",
    "_ = plt.plot(x, y, marker = '.')\n",
    "\n",
    "# Make margins and label axes\n",
    "plt.margins(0.02)\n",
    "_ = plt.xlabel('yearly rainfall (mm)')\n",
    "_ = plt.ylabel('ECDF')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice how the bootstrap samples give an idea of how the distribution of rainfalls is spread."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Bootstrap Confidence Intervals\n",
    "we learned how to take a set of data, create a bootstrap sample, and then compute a bootstrap replicate of a given statistic. Since we will repeat the replicates over and over again, we can write a function to generate a bootstrap replicate. We will call the function bootstrap_replicate_1d, since it works on one-dimensional arrays. We pass in the data and also a function that computes the statistic of interest. We could pass np dot mean or np dot median, for example. Generating a replicate takes two steps. First, we choose entries out of the data array so that the bootstrap sample has the same number of entries as the original data. Then, we compute the statistic using the specified function. If we call the function, we get a bootstrap replicate. And we can do this over and over again. So, how do we do it over and over again? With a for loop! First, we have to initialize an array to store our bootstrap replicates. We will make 10,000 replicates, so we use np dot empty to create an empty array. Next, we write a for loop to generate a replicate and store it in the bs_replicates array. Now that we have the replicates, we can make a histogram to see what we might expect to get for the mean of repeated measurements of the speed of light. Note that we use the normed equals True keyword argument. This sets the height of the bars of the histogram such that the total area of the bars is equal to one. This is called normalization, and we do it so that the histogram approximates a probability density function. You'll recall from the prequel to this course that the area under the PDF gives a probability. So, we have computed the approximate PDF of the mean speed of light we would expect to get if we performed the measurements again. Now we're thinking probabilistically! If we repeat the experiment again and again, we are likely to only see the sample mean vary by about 30 km/s. Now it is useful to summarize this result without having to resort to a graphical method like a histogram. To do this, we will compute the 95% confidence interval of the mean. The p% confidence interval is defined as follows. If we repeated measurements over and over again, p% of the observed values would lie within the p% confidence interval. In our case, if we repeated the 100 measurements of the speed of light over and over again, 95% of the sample means would lie within the 95% confidence interval. By doing bootstrap replicas, we just \"repeated\" the experiment over and over again. So, we just use np dot percentile to compute the 2-point-5th and 97-point-5th percentiles to get the 95% confidence interval. This is indeed commensurate with what we see in the histogram."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bootstrap_replicate_1d(data, func):\n",
    "    \"\"\"Generate bootstrap replicate of 1D data.\"\"\"\n",
    "    bs_sample = np.random.choice(data, len(data))\n",
    "    return func(bs_sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generating many bootstrap replicates\n",
    "The function bootstrap_replicate_1d() from the video is available in your namespace. Now you'll write another function, draw_bs_reps(data, func, size=1), which generates many bootstrap replicates from the data set. This function will come in handy for you again and again as you compute confidence intervals and later when you do hypothesis tests.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_bs_reps(data, func, size=1):\n",
    "    \"\"\"Draw bootstrap replicates.\"\"\"\n",
    "\n",
    "    # Initialize array of replicates: bs_replicates\n",
    "    bs_replicates = np.empty(size)\n",
    "\n",
    "    # Generate replicates\n",
    "    for i in range(size):\n",
    "        bs_replicates[i] = bootstrap_replicate_1d(data, func)\n",
    "\n",
    "    return bs_replicates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Bootstrap replicates of the mean and the SEM\n",
    "In this exercise, you will compute a bootstrap estimate of the probability density function of the mean annual rainfall at the Sheffield Weather Station. Remember, we are estimating the mean annual rainfall we would get if the Sheffield Weather Station could repeat all of the measurements from 1883 to 2015 over and over again. This is a probabilistic estimate of the mean. You will plot the PDF as a histogram, and you will see that it is Normal.\n",
    "\n",
    "In fact, it can be shown theoretically that under not-too-restrictive conditions, the value of the mean will always be Normally distributed. (This does not hold in general, just for the mean and a few other statistics.) The standard deviation of this distribution, called the standard error of the mean, or SEM, is given by the standard deviation of the data divided by the square root of the number of data points. I.e., for a data set, $ sem = np.std(data) / np.sqrt(len(data)) $. Using hacker statistics, you get this same result without the need to derive it, but you will verify this result from your bootstrap replicates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.510549150506188\n",
      "10.358764199574097\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Take 10,000 bootstrap replicates of the mean: bs_replicates\n",
    "bs_replicates = draw_bs_reps(rainfall, np.mean, size = 10000)\n",
    "\n",
    "# Compute and print SEM\n",
    "sem = np.std(rainfall) / np.sqrt(len(rainfall))\n",
    "print(sem)\n",
    "\n",
    "# Compute and print standard deviation of bootstrap replicates\n",
    "bs_std = np.std(bs_replicates)\n",
    "print(bs_std)\n",
    "\n",
    "# Make a histogram of the results\n",
    "_ = plt.hist(bs_replicates, bins = 50, density = True)\n",
    "_ = plt.xlabel('mean annual rainfall (mm)')\n",
    "_ = plt.ylabel('PDF')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the SEM we got from the known expression and the bootstrap replicates is the same and the distribution of the bootstrap replicates of the mean is Normal."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A confidence interval gives upper and lower bounds on the range of parameter values you might expect to get if we repeat our measurements. For named distributions, you can compute them analytically or look them up, but one of the many beautiful properties of the bootstrap method is that you can take percentiles of your bootstrap replicates to get your confidence interval. Conveniently, you can use the np.percentile() function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Bootstrap replicates of other statistics\n",
    "We saw in a previous exercise that the mean is Normally distributed. This does not necessarily hold for other statistics, but no worry: as hackers, we can always take bootstrap replicates! In this exercise, you'll generate bootstrap replicates for the variance of the annual rainfall at the Sheffield Weather Station and plot the histogram of the replicates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_bs_reps(data, func, size=1):\n",
    "    \"\"\"Draw bootstrap replicates.\"\"\"\n",
    "    # Initialize array of replicates\n",
    "    bs_replicates = np.empty(size)\n",
    "    # Generate replicates\n",
    "    for i in range(size):\n",
    "        bs_replicates[i] = bootstrap_replicate_1d(data, func)\n",
    "    return bs_replicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate 10,000 bootstrap replicates of the variance: bs_replicates\n",
    "bs_replicates = draw_bs_reps(rainfall, np.var, size = 10000)\n",
    "\n",
    "# Put the variance in units of square centimeters\n",
    "bs_replicates = bs_replicates/100\n",
    "\n",
    "# Make a histogram of the results\n",
    "_ = plt.hist(bs_replicates, bins = 50, density = True)\n",
    "_ = plt.xlabel('variance of annual rainfall (sq. cm)')\n",
    "_ = plt.ylabel('PDF')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is not normally distributed, as it has a longer tail to the right. Note that you can also compute a confidence interval on the variance, or any other statistic, using np.percentile() with your bootstrap replicates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Confidence interval on the rate of no-hitters\n",
    "Consider again the inter-no-hitter intervals for the modern era of baseball. Generate 10,000 bootstrap replicates of the optimal parameter $\\tau$. Plot a histogram of your replicates and report a 95% confidence interval."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95% confidence interval = [663.65229084 869.79741036] games\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Draw bootstrap replicates of the mean no-hitter time (equal to tau): bs_replicates\n",
    "bs_replicates = draw_bs_reps(nohitter_times, np.mean, size = 10000)\n",
    "\n",
    "# Compute the 95% confidence interval: conf_int\n",
    "conf_int = np.percentile(bs_replicates, [2.5, 97.5])\n",
    "\n",
    "# Print the confidence interval\n",
    "print('95% confidence interval =', conf_int, 'games')\n",
    "\n",
    "# Plot the histogram of the replicates\n",
    "_ = plt.hist(bs_replicates, bins=50, density = True)\n",
    "_ = plt.xlabel(r'$\\tau$ (games)')\n",
    "_ = plt.ylabel('PDF')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This gives you an estimate of what the typical time between no-hitters is. It could be anywhere between 660 and 870 games."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A function to do pairs bootstrap\n",
    "As discussed in the video, pairs bootstrap involves resampling pairs of data. Each collection of pairs fit with a line, in this case using np.polyfit(). We do this again and again, getting bootstrap replicates of the parameter values. To have a useful tool for doing pairs bootstrap, you will write a function to perform pairs bootstrap on a set of x,y data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_bs_pairs_linreg(x, y, size=1):\n",
    "    \"\"\"Perform pairs bootstrap for linear regression.\"\"\"\n",
    "\n",
    "    # Set up array of indices to sample from: inds\n",
    "    inds = np.arange(0, len(x))\n",
    "\n",
    "    # Initialize replicates: bs_slope_reps, bs_intercept_reps\n",
    "    bs_slope_reps = np.empty(size)\n",
    "    bs_intercept_reps = np.empty(size)\n",
    "\n",
    "    # Generate replicates\n",
    "    for i in range(size):\n",
    "        bs_inds = np.random.choice(inds, size = len(inds))\n",
    "        bs_x, bs_y = x[bs_inds], y[bs_inds]\n",
    "        bs_slope_reps[i], bs_intercept_reps[i] = np.polyfit(bs_x, bs_y, 1)\n",
    "\n",
    "    return bs_slope_reps, bs_intercept_reps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Pairs bootstrap of literacy/fertility data\n",
    "Using the function you just wrote, perform pairs bootstrap to plot a histogram describing the estimate of the slope from the illiteracy/fertility data. Also report the 95% confidence interval of the slope. The data is available to you in the NumPy arrays illiteracy and fertility.\n",
    "\n",
    "As a reminder, draw_bs_pairs_linreg() has a function signature of draw_bs_pairs_linreg(x, y, size=1), and it returns two values: bs_slope_reps and bs_intercept_reps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.04389859 0.05528877]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate replicates of slope and intercept using pairs bootstrap\n",
    "bs_slope_reps, bs_intercept_reps = draw_bs_pairs_linreg(illiteracy, fertility, 1000)\n",
    "\n",
    "# Compute and print 95% CI for slope\n",
    "print(np.percentile(bs_slope_reps, [2.5, 97.5]))\n",
    "\n",
    "# Plot the histogram\n",
    "_ = plt.hist(bs_slope_reps, bins=50, density = True)\n",
    "_ = plt.xlabel('slope')\n",
    "_ = plt.ylabel('PDF')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plotting bootstrap regressions\n",
    "A nice way to visualize the variability we might expect in a linear regression is to plot the line you would get from each bootstrap replicate of the slope and intercept. Do this for the first 100 of your bootstrap replicates of the slope and intercept (stored as bs_slope_reps and bs_intercept_reps)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate array of x-values for bootstrap lines: x\n",
    "x = np.array([0, 100])\n",
    "\n",
    "# Plot the bootstrap lines\n",
    "for i in range(100):\n",
    "    _ = plt.plot(x, bs_slope_reps[i]*x + bs_intercept_reps[i],\n",
    "                 linewidth = 0.5, alpha = 0.2, color = 'red')\n",
    "\n",
    "# Plot the data\n",
    "_ = plt.plot(illiteracy, fertility, marker ='.', linestyle = 'none')\n",
    "\n",
    "# Label axes, set the margins, and show the plot\n",
    "_ = plt.xlabel('illiteracy')\n",
    "_ = plt.ylabel('fertility')\n",
    "plt.margins(0.02)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Introduction to hypothesis testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Generating a permutation sample"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Permutation sampling is a great way to simulate the hypothesis that two variables have identical probability distributions. This is often a hypothesis you want to test, so in this exercise, you will write a function to generate a permutation sample from two data sets.\n",
    "\n",
    "Remember, a permutation sample of two arrays having respectively n1 and n2 entries is constructed by concatenating the arrays together, scrambling the contents of the concatenated array, and then taking the first n1 entries as the permutation sample of the first array and the last n2 entries as the permutation sample of the second array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def permutation_sample(data1, data2):\n",
    "    \"\"\"Generate a permutation sample from two data sets.\"\"\"\n",
    "\n",
    "    # Concatenate the data sets: data\n",
    "    data = np.concatenate((data1, data2))\n",
    "\n",
    "    # Permute the concatenated array: permuted_data\n",
    "    permuted_data = np.random.permutation(data)\n",
    "\n",
    "    # Split the permuted array into two: perm_sample_1, perm_sample_2\n",
    "    perm_sample_1 = permuted_data[:len(data1)]\n",
    "    perm_sample_2 = permuted_data[len(data1):]\n",
    "\n",
    "    return perm_sample_1, perm_sample_2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Visualizing permutation sampling\n",
    "To help see how permutation sampling works, in this exercise you will generate permutation samples and look at them graphically.\n",
    "\n",
    "We will use the Sheffield Weather Station data again, this time considering the monthly rainfall in June (a dry month) and November (a wet month). We expect these might be differently distributed, so we will take permutation samples to see how their ECDFs would look if they were identically distributed.\n",
    "\n",
    "The data are stored in the Numpy arrays rain_june and rain_november."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "rain_june = np.array([ 66.2,  39.7,  76.4,  26.5,  11.2,  61.8,   6.1,  48.4,  89.2,\n",
    "       104. ,  34. ,  60.6,  57.1,  79.1,  90.9,  32.3,  63.8,  78.2,\n",
    "        27.5,  43.4,  30.1,  17.3,  77.5,  44.9,  92.2,  39.6,  79.4,\n",
    "        66.1,  53.5,  98.5,  20.8,  55.5,  39.6,  56. ,  65.1,  14.8,\n",
    "        13.2,  88.1,   8.4,  32.1,  19.6,  40.4,   2.2,  77.5, 105.4,\n",
    "        77.2,  38. ,  27.1, 111.8,  17.2,  26.7,  23.3,  77.2,  87.2,\n",
    "        27.7,  50.6,  60.3,  15.1,   6. ,  29.4,  39.3,  56.3,  80.4,\n",
    "        85.3,  68.4,  72.5,  13.3,  28.4,  14.7,  37.4,  49.5,  57.2,\n",
    "        85.9,  82.1,  31.8, 126.6,  30.7,  41.4,  33.9,  13.5,  99.1,\n",
    "        70.2,  91.8,  61.3,  13.7,  54.9,  62.5,  24.2,  69.4,  83.1,\n",
    "        44. ,  48.5,  11.9,  16.6,  66.4,  90. ,  34.9, 132.8,  33.4,\n",
    "       225. ,   7.6,  40.9,  76.5,  48. , 140. ,  55.9,  54.1,  46.4,\n",
    "        68.6,  52.2, 108.3,  14.6,  11.3,  29.8, 130.9, 152.4,  61. ,\n",
    "        46.6,  43.9,  30.9, 111.1,  68.5,  42.2,   9.8, 285.6,  56.7,\n",
    "       168.2,  41.2,  47.8, 166.6,  37.8,  45.4,  43.2])\n",
    "\n",
    "rain_november = np.array([ 83.6,  30.9,  62.2,  37. ,  41. , 160.2,  18.2, 122.4,  71.3,\n",
    "        44.2,  49.1,  37.6, 114.5,  28.8,  82.5,  71.9,  50.7,  67.7,\n",
    "       112. ,  63.6,  42.8,  57.2,  99.1,  86.4,  84.4,  38.1,  17.7,\n",
    "       102.2, 101.3,  58. ,  82. , 101.4,  81.4, 100.1,  54.6,  39.6,\n",
    "        57.5,  29.2,  48.8,  37.3, 115.4,  55.6,  62. ,  95. ,  84.2,\n",
    "       118.1, 153.2,  83.4, 104.7,  59. ,  46.4,  50. , 147.6,  76.8,\n",
    "        59.9, 101.8, 136.6, 173. ,  92.5,  37. ,  59.8, 142.1,   9.9,\n",
    "       158.2,  72.6,  28. , 112.9, 119.3, 199.2,  50.7,  44. , 170.7,\n",
    "        67.2,  21.4,  61.3,  15.6, 106. , 116.2,  42.3,  38.5, 132.5,\n",
    "        40.8, 147.5,  93.9,  71.4,  87.3, 163.7, 141.4,  62.6,  84.9,\n",
    "        28.8, 121.1,  28.6,  32.4, 112. ,  50. ,  96.9,  81.8,  70.4,\n",
    "       117.5,  41.2, 124.9,  78.2,  93. ,  53.5,  50.5,  42.6,  47.9,\n",
    "        73.1, 129.1,  56.9, 103.3,  60.5, 134.3,  93.1,  49.5,  48.2,\n",
    "       167.9,  27. , 111.1,  55.4,  36.2,  57.4,  66.8,  58.3,  60. ,\n",
    "       161.6, 112.7,  37.4, 110.6,  56.6,  95.8, 126.8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for _ in range(50):\n",
    "    # Generate permutation samples\n",
    "    perm_sample_1, perm_sample_2 = permutation_sample(rain_june, rain_november)\n",
    "\n",
    "    # Compute ECDFs\n",
    "    x_1, y_1 = ecdf(perm_sample_1)\n",
    "    x_2, y_2 = ecdf(perm_sample_2)\n",
    "\n",
    "    # Plot ECDFs of permutation sample\n",
    "    _ = plt.plot(x_1, y_1, marker='.', linestyle='none',\n",
    "                 color='red', alpha=0.02)\n",
    "    _ = plt.plot(x_2, y_2, marker='.', linestyle='none',\n",
    "                 color='blue', alpha=0.02)\n",
    "\n",
    "# Create and plot ECDFs from original data\n",
    "x_1, y_1 = ecdf(rain_june)\n",
    "x_2, y_2 = ecdf(rain_november)\n",
    "_ = plt.plot(x_1, y_1, marker='.', linestyle='none', color='red')\n",
    "_ = plt.plot(x_2, y_2, marker='.', linestyle='none', color='blue')\n",
    "\n",
    "# Label axes, set margin, and show plot\n",
    "plt.margins(0.02)\n",
    "_ = plt.xlabel('monthly rainfall (mm)')\n",
    "_ = plt.ylabel('ECDF')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the permutation samples ECDFs overlap and give a purple haze. None of the ECDFs from the permutation samples overlap with the observed data, suggesting that the hypothesis is not commensurate with the data. June and November rainfall are not identically distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Generating permutation replicates\n",
    "A permutation replicate is a single value of a statistic computed from a permutation sample. As the draw_bs_reps()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_perm_reps(data_1, data_2, func, size=1):\n",
    "    \"\"\"Generate multiple permutation replicates.\"\"\"\n",
    "\n",
    "    # Initialize array of replicates: perm_replicates\n",
    "    perm_replicates = np.empty(size)\n",
    "\n",
    "    for i in range(size):\n",
    "        # Generate permutation sample\n",
    "        perm_sample_1, perm_sample_2 = permutation_sample(data_1, data_2)\n",
    "\n",
    "        # Compute the test statistic\n",
    "        perm_replicates[i] = func(perm_sample_1, perm_sample_2)\n",
    "\n",
    "    return perm_replicates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Look before you leap: EDA before hypothesis testing\n",
    "\n",
    "Kleinteich and Gorb (Sci. Rep., 4, 5225, 2014) performed an interesting experiment with South American horned frogs. They held a plate connected to a force transducer, along with a bait fly, in front of them. They then measured the impact force and adhesive force of the frog's tongue when it struck the target.\n",
    "\n",
    "Frog A is an adult and Frog B is a juvenile. The researchers measured the impact force of 20 strikes for each frog. In the next exercise, we will test the hypothesis that the two frogs have the same distribution of impact forces. But, remember, it is important to do EDA first! Let's make a bee swarm plot for the data. They are stored in a Pandas data frame, df, where column ID is the identity of the frog and column impact_force is the impact force in Newtons (N)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  ID  impact_force\n",
      "0  A         1.612\n",
      "1  A         0.605\n",
      "2  A         0.327\n",
      "3  A         0.946\n",
      "4  A         0.541\n"
     ]
    }
   ],
   "source": [
    "# Manually constructing the frog dataset\n",
    "\n",
    "ID = ['A','A','A','A','A','A','A','A','A','A','A','A','A','A','A','A','A','A','A','A','B','B','B','B','B','B','B','B',\n",
    "       'B','B','B','B','B','B','B','B','B','B','B','B']\n",
    "\n",
    "impact_force = [1.612, 0.605, 0.327, 0.946, 0.541, 1.539, 0.529, 0.628, 1.453, 0.297, 0.703, 0.269, 0.751, 0.245, \n",
    "                1.182, 0.515, 0.435, 0.383, 0.457, 0.73, 0.172, 0.142, 0.037, 0.453, 0.355, 0.022, 0.502, 0.273,\n",
    "                0.72, 0.582, 0.198, 0.198, 0.597, 0.516, 0.815, 0.402, 0.605, 0.711, 0.614, 0.468]\n",
    "\n",
    "list_labels = ['ID', 'impact_force']\n",
    "list_cols = [ID, impact_force]\n",
    "\n",
    "zipped = list(zip(list_labels, list_cols))\n",
    "\n",
    "#print(zipped)\n",
    "data = dict(zipped)\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make bee swarm plot\n",
    "_ = sns.swarmplot(x= 'ID', y = 'impact_force', data = df)\n",
    "\n",
    "# Label axes\n",
    "_ = plt.xlabel('frog')\n",
    "_ = plt.ylabel('impact force (N)')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Eyeballing it, it does not look like they come from the same distribution. Frog A, the adult, has three or four very hard strikes, and Frog B, the juvenile, has a couple weak ones. However, it is possible that with only 20 samples it might be too difficult to tell if they have different distributions, so we should proceed with the hypothesis test."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Permutation test on frog data\n",
    "The average strike force of Frog A was 0.71 Newtons (N), and that of Frog B was 0.42 N for a difference of 0.29 N. It is possible the frogs strike with the same force and this observed difference was by chance. You will compute the probability of getting at least a 0.29 N difference in mean strike force under the hypothesis that the distributions of strike forces for the two frogs are identical. We use a permutation test with a test statistic of the difference of means to test this hypothesis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "force_a = df[df['ID'] == 'A']['impact_force'].to_numpy()\n",
    "#print(force_a)\n",
    "\n",
    "force_b = df[df['ID'] == 'B']['impact_force'].to_numpy()\n",
    "#print(force_b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value = 0.0058\n"
     ]
    }
   ],
   "source": [
    "def diff_of_means(data_1, data_2):\n",
    "    \"\"\"Difference in means of two arrays.\"\"\"\n",
    "\n",
    "    # The difference of means of data_1, data_2: diff\n",
    "    diff = np.mean(data_1) - np.mean(data_2)\n",
    "\n",
    "    return diff\n",
    "\n",
    "# Compute difference of mean impact force from experiment: empirical_diff_means\n",
    "empirical_diff_means = diff_of_means(force_a, force_b)\n",
    "\n",
    "# Draw 10,000 permutation replicates: perm_replicates\n",
    "perm_replicates = draw_perm_reps(force_a, force_b,\n",
    "                                 diff_of_means, size=10000)\n",
    "\n",
    "# Compute p-value: p\n",
    "p = np.sum(perm_replicates >= empirical_diff_means) / len(perm_replicates)\n",
    "\n",
    "# Print the result\n",
    "print('p-value =', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The p-value tells you that there is about a 0.6% chance that you would get the difference of means observed in the experiment if frogs were exactly the same. A p-value below 0.01 is typically said to be \"statistically significant,\" but: warning! warning! warning! You have computed a p-value; it is a number. I encourage you not to distill it to a yes-or-no phrase. p = 0.006 and p = 0.000000006 are both said to be \"statistically significant,\" but they are definitely not the same!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bootstrap Hypothesis Tests \n",
    "##### Pipeline for hypothesis testing\n",
    "First, clearly state the null hypothesis. Stating the null hypothesis so that it is crystal clear is essential to be able to simulate it. Next, define your test statistic. Then generate many sets of simulated data assuming the null hypothesis is true. Compute the test statistic for each simulated data set. The p-value is then the fraction of your simulated data sets for which the test statistic is at least as extreme as for the real data. Now let's do another hypothesis test.\n",
    "Consider again Michelson's measurements of the speed of light. Around the same time that Michelson did his experiment, his future collaborator Simon Newcomb also measured the speed of light.\n",
    "Newcomb's measurements had a mean of 299,860 km/s, differing from Michelson's by about 8 km/s. We want to know if there is something fundamentally different about Newcomb's and Michelson's measurements. The thing is: we only have Newcomb's mean and none of his data points!\n",
    "The question is: could Michelson have gotten the data set he did if the true mean speed of light in his experiments was equal to Newcomb's? So, we formally state our hypothesis as this: the true mean speed of light in Michelson's experiments was actually Newcomb's reported mean, which we'll call the Newcomb value. When I say the true mean speed of light in Michelson's experiments, think the mean Michelson would have gotten had done his experiment lots and lots and lots of times. Because we are comparing a data set with a value, a permutation test is not applicable. We need to simulate the situation in which the true mean speed of light in Michelson's experiments is Newcomb's value. \n",
    "To achieve this, we shift Michelson's data such that its mean now matches Newcomb's value. See here the ECDF of the shifted data relative to the original data. We can then use bootstrapping on this shifted data to simulate data acquisition under the null hypothesis. The test statistic is the the mean of the bootstrap sample minus Newcomb's value. We write a function diff_from_newcomb to compute it, and compute the observed test statistic. We then use the draw_bs_reps function you have already written to generate the bootstrap replicates, which is the value of the test statistic computed from a bootstrap sample. Note that the data we pass into the function are the shifted Michelson measurements because those are the ones we use to simulate the null hypothesis. The p-value is computed exactly the same way as for the permutation test. We report the fraction of bootstrap replicates that are less than the observed test statistic. In this case, we use less than because the mean from Michelson's experiments was less than Newcomb's value. We get a p-value of 0-point-16. This suggests that it is quite possible the Newcomb and Michelson did not really have fundamental differences in their measurements. This is an example of a one-sample test, since we had one set of samples from Michelson and were comparing to a single number from Newcomb. Often in the field, you will do two-sample tests that require the bootstrap, which you will explore in the exercises. I know this video was a lot to take in. Explicitly simulating a null hypothesis like this, we we have to shift the mean, can be tricky. You'll get a chance to practice in the exercises, and you may want to go over the procedure again to make sure you understand it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A one-sample bootstrap hypothesis test\n",
    "Another juvenile frog was studied, Frog C, and you want to see if Frog B and Frog C have similar impact forces. Unfortunately, you do not have Frog C's impact forces available, but you know they have a mean of 0.55 N. Because you don't have the original data, you cannot do a permutation test, and you cannot assess the hypothesis that the forces from Frog B and Frog C come from the same distribution. You will therefore test another, less restrictive hypothesis: The mean strike force of Frog B is equal to that of Frog C.\n",
    "\n",
    "To set up the bootstrap hypothesis test, you will take the mean as our test statistic. Remember, your goal is to calculate the probability of getting a mean impact force less than or equal to what was observed for Frog B if the hypothesis that the true mean of Frog B's impact forces is equal to that of Frog C is true. You first translate all of the data of Frog B such that the mean is 0.55 N. This involves adding the mean force of Frog C and subtracting the mean force of Frog B from each measurement of Frog B. This leaves other properties of Frog B's distribution, such as the variance, unchanged."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p =  0.0046\n"
     ]
    }
   ],
   "source": [
    "#Translate the impact forces of Frog B such that its mean is 0.55 N.\n",
    "# Make an array of translated impact forces: translated_force_b\n",
    "translated_force_b = (force_b + 0.55) - np.mean(force_b)\n",
    "\n",
    "# Take bootstrap replicates of Frog B's translated impact forces: bs_replicates\n",
    "bs_replicates = draw_bs_reps(translated_force_b, np.mean, 10000)\n",
    "\n",
    "# Compute fraction of replicates that are less than the observed Frog B force: p\n",
    "p = np.sum(bs_replicates <= np.mean(force_b)) / 10000\n",
    "\n",
    "# Print the p-value\n",
    "print('p = ', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The low p-value suggests that the null hypothesis that Frog B and Frog C have the same mean impact force is false."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A two-sample bootstrap hypothesis test for difference of means\n",
    "We now want to test the hypothesis that Frog A and Frog B have the same mean impact force, but not necessarily the same distribution, which is also impossible with a permutation test.\n",
    "\n",
    "To do the two-sample bootstrap test, we shift both arrays to have the same mean, since we are simulating the hypothesis that their means are, in fact, equal. We then draw bootstrap samples out of the shifted arrays and compute the difference in means. This constitutes a bootstrap replicate, and we generate many of them. The p-value is the fraction of replicates with a difference in means greater than or equal to what was observed.\n",
    "\n",
    "The objects forces_concat and empirical_diff_means are already in your namespace."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "forces_concat = np.array([1.612, 0.605, 0.327, 0.946, 0.541, 1.539, 0.529, 0.628, 1.453,\n",
    "       0.297, 0.703, 0.269, 0.751, 0.245, 1.182, 0.515, 0.435, 0.383,\n",
    "       0.457, 0.73 , 0.172, 0.142, 0.037, 0.453, 0.355, 0.022, 0.502,\n",
    "       0.273, 0.72 , 0.582, 0.198, 0.198, 0.597, 0.516, 0.815, 0.402,\n",
    "       0.605, 0.711, 0.614, 0.468])\n",
    "\n",
    "empirical_diff_means = 0.28825000000000006"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value = 0.0051\n"
     ]
    }
   ],
   "source": [
    "# Compute mean of all forces: mean_force\n",
    "mean_force = np.mean(forces_concat)\n",
    "\n",
    "# Generate shifted arrays\n",
    "force_a_shifted = force_a - np.mean(force_a) + mean_force\n",
    "force_b_shifted = force_b - np.mean(force_b) + mean_force \n",
    "\n",
    "# Compute 10,000 bootstrap replicates from shifted arrays\n",
    "bs_replicates_a = draw_bs_reps(force_a_shifted, np.mean, 10000)\n",
    "bs_replicates_b = draw_bs_reps(force_b_shifted, np.mean, 10000)\n",
    "\n",
    "# Get replicates of difference of means: bs_replicates\n",
    "bs_replicates = bs_replicates_a - bs_replicates_b\n",
    "\n",
    "# Compute and print p-value: p\n",
    "p = np.sum(bs_replicates >= empirical_diff_means) / len(bs_replicates)\n",
    "print('p-value =', p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A/B TESTING\n",
    "\n",
    "Imagine your company has a proposed redesign of the splash page of its website. They are interested in how many more users click through to the website for the redesign versus the original design. You devise a test. Take a set of 1000 visitors to the site and direct 500 of them to the original splash page and 500 of them to the redesigned one. You determine whether or not each of them clicks through to the rest of the website. On the original page, which we'll call page A, 45 visitors clicked through, and on the redesigned page, page B, 67 visitors clicked through. This makes you happy because that is almost a 50% increase in the click-through rate. But maybe there really is no difference between the effect of two designs on click-through rate and the difference you saw is due the random chance. You want to check: what is the probability that you would observe at least the observed difference in number of clicks through if that were the case? This is asking exactly the question you can address with a hypothesis test. A permutation test is a good choice here because you can simulate the result as if the redesign had no effect on the click-through rate. Let's code it up in Python: for each splash page design, we have a Numpy array which contains 1 or 0 values for whether or not a visitor clicked through. Next, we need to define a function diff_frac for our test statistic. Ours is the fraction of visitors who click through. We can compute the fraction who click through by summing the entries in the arrays of ones and zeros and then dividing by the number of entries. Finally we compute the observed value of the test statistic using this function diff_frac. Now everything is in place to generate our permutation replicates of the test statistic using the permutation_replicate function you wrote in the exercises; we will generate 10,000. We compute the p-value as the number of replicates where the test statistic was at least as great as what we observed. We get a value of 0-point-016, which is relatively small, so we might reasonably think that the redesign is a real improvement. This is an example of an A/B test. \n",
    "A/B testing is often used by organizations to see if a change in strategy gives different, hopefully better, results. Generally,the null hypothesis in an A/B test is that your test statistic is impervious to the change. A low p-value implies that the change in strategy lead to a change in performance. Once again, though, be warned that statistical significance does not mean practical significance. A difference in click-though rate may be statistically significant, but if it is only a couple people more per day, your marketing team may not consider the change worth the cost! A/B testing is just a special case of the hypothesis testing framework we have already been working with, a fun and informative one."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The vote for the Civil Rights Act in 1964\n",
    "The Civil Rights Act of 1964 was one of the most important pieces of legislation ever passed in the USA. Excluding \"present\" and \"abstain\" votes, 153 House Democrats and 136 Republicans voted yea. However, 91 Democrats and 35 Republicans voted nay. Did party affiliation make a difference in the vote?\n",
    "\n",
    "To answer this question, you will evaluate the hypothesis that the party of a House member has no bearing on his or her vote. You will use the fraction of Democrats voting in favor as your test statistic and evaluate the probability of observing a fraction of Democrats voting in favor at least as small as the observed fraction of 153/244. (That's right, at least as small as. In 1964, it was the Democrats who were less progressive on civil rights issues.) To do this, permute the party labels of the House voters and then arbitrarily divide them into \"Democrats\" and \"Republicans\" and compute the fraction of Democrats voting yea."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value = 0.0002\n"
     ]
    }
   ],
   "source": [
    "# Construct arrays of data: dems, reps\n",
    "dems = np.array([True] * 153 + [False] * 91)\n",
    "reps = np.array([True] * 136 + [False] * 35)\n",
    "\n",
    "def frac_yea_dems(dems, reps):\n",
    "    \"\"\"Compute fraction of Democrat yea votes.\"\"\"\n",
    "    frac = np.sum(dems) /len(dems)\n",
    "    return frac\n",
    "\n",
    "# Acquire permutation samples: perm_replicates\n",
    "perm_replicates = draw_perm_reps(dems, reps, frac_yea_dems, 10000)\n",
    "\n",
    "# Compute and print p-value: p\n",
    "p = np.sum(perm_replicates <= 153/244) / len(perm_replicates)\n",
    "print('p-value =', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This small p-value suggests that party identity had a lot to do with the voting. Importantly, the South had a higher fraction of Democrat representatives, and consequently also a more racist bias."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  A time-on-website analog\n",
    "It turns out that you already did a hypothesis test analogous to an A/B test where you are interested in how much time is spent on the website before and after an ad campaign. The frog tongue force (a continuous quantity like time on the website) is an analog. \"Before\" = Frog A and \"after\" = Frog B. Let's practice this again with something that actually is a before/after scenario.\n",
    "\n",
    "We return to the no-hitter data set. In 1920, Major League Baseball implemented important rule changes that ended the so-called dead ball era. Importantly, the pitcher was no longer allowed to spit on or scuff the ball, an activity that greatly favors pitchers. In this problem you will perform an A/B test to determine if these rule changes resulted in a slower rate of no-hitters (i.e., longer average time between no-hitters) using the difference in mean inter-no-hitter time as your test statistic. The inter-no-hitter times for the respective eras are stored in the arrays nht_dead and nht_live, where \"nht\" is meant to stand for \"no-hitter time.\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "nht_dead = np.array([  -1,  894,   10,  130,    1,  934,   29,    6,  485,  254,  372,\n",
    "         81,  191,  355,  180,  286,   47,  269,  361,  173,  246,  492,\n",
    "        462, 1319,   58,  297,   31, 2970,  640,  237,  434,  570,   77,\n",
    "        271,  563, 3365,   89,    0,  379,  221,  479,  367,  628,  843,\n",
    "       1613, 1101,  215,  684,  814,  278,  324,  161,  219,  545,  715,\n",
    "        966,  624,   29,  450,  107,   20,   91, 1325,  124, 1468,  104,\n",
    "       1309,  429,   62, 1878, 1104,  123,  251,   93,  188,  983,  166,\n",
    "         96,  702,   23,  524,   26,  299,   59,   39,   12,    2,  308,\n",
    "       1114,  813,  887])\n",
    "\n",
    "nht_live = np.array([ 645, 2088,   42, 2090,   11,  886, 1665, 1084, 2900, 2432,  750,\n",
    "       4021, 1070, 1765, 1322,   26,  548, 1525,   77, 2181, 2752,  127,\n",
    "       2147,  211,   41, 1575,  151,  479,  697,  557, 2267,  542,  392,\n",
    "         73,  603,  233,  255,  528,  397, 1529, 1023, 1194,  462,  583,\n",
    "         37,  943,  996,  480, 1497,  717,  224,  219, 1531,  498,   44,\n",
    "        288,  267,  600,   52,  269, 1086,  386,  176, 2199,  216,   54,\n",
    "        675, 1243,  463,  650,  171,  327,  110,  774,  509,    8,  197,\n",
    "        136,   12, 1124,   64,  380,  811,  232,  192,  731,  715,  226,\n",
    "        605,  539, 1491,  323,  240,  179,  702,  156,   82, 1397,  354,\n",
    "        778,  603, 1001,  385,  986,  203,  149,  576,  445,  180, 1403,\n",
    "        252,  675, 1351, 2983, 1568,   45,  899, 3260, 1025,   31,  100,\n",
    "       2055, 4043,   79,  238, 3931, 2351,  595,  110,  215,    0,  563,\n",
    "        206,  660,  242,  577,  179,  157,  192,  192, 1848,  792, 1693,\n",
    "         55,  388,  225, 1134, 1172, 1555,   31, 1582, 1044,  378, 1687,\n",
    "       2915,  280,  765, 2819,  511, 1521,  745, 2491,  580, 2072, 6450,\n",
    "        578,  745, 1075, 1103, 1549, 1520,  138, 1202,  296,  277,  351,\n",
    "        391,  950,  459,   62, 1056, 1128,  139,  420,   87,   71,  814,\n",
    "        603, 1349,  162, 1027,  783,  326,  101,  876,  381,  905,  156,\n",
    "        419,  239,  119,  129,  467])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-val = 0.0002\n"
     ]
    }
   ],
   "source": [
    "# Compute the observed difference in mean inter-no-hitter times: nht_diff_obs\n",
    "nht_diff_obs = diff_of_means(nht_dead, nht_live)\n",
    "\n",
    "# Acquire 10,000 permutation replicates of difference in mean no-hitter time: perm_replicates\n",
    "perm_replicates = draw_perm_reps(nht_dead, nht_live, diff_of_means, 10000)\n",
    "\n",
    "\n",
    "# Compute and print the p-value: p\n",
    "p = np.sum(perm_replicates <= nht_diff_obs)/10000\n",
    "print('p-val =', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your p-value is 0.0001, which means that only one out of your 10,000 replicates had a result as extreme as the actual difference between the dead ball and live ball eras. This suggests strong statistical significance. Watch out, though, you could very well have gotten zero replicates that were as extreme as the observed value. This just means that the p-value is quite small, almost certainly smaller than 0.001."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test Of Correlation\n",
    "###### Hypothesis test on Pearson correlation\n",
    "The observed correlation between female illiteracy and fertility may just be by chance; the fertility of a given country may actually be totally independent of its illiteracy. You will test this hypothesis. To do so, permute the illiteracy values but leave the fertility values fixed. This simulates the hypothesis that they are totally independent of each other. For each permutation, compute the Pearson correlation coefficient and assess how many of your permutation replicates have a Pearson correlation coefficient greater than the observed one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-val = 0.0\n"
     ]
    }
   ],
   "source": [
    "# Compute observed correlation: r_obs\n",
    "r_obs = pearson_r(illiteracy, fertility)\n",
    "\n",
    "# Initialize permutation replicates: perm_replicates\n",
    "perm_replicates = np.empty(10000)\n",
    "\n",
    "# Draw replicates\n",
    "for i in range(10000):\n",
    "    # Permute illiteracy measurments: illiteracy_permuted\n",
    "    illiteracy_permuted = np.random.permutation(illiteracy)\n",
    "\n",
    "    # Compute Pearson correlation\n",
    "    perm_replicates[i] = pearson_r(illiteracy_permuted, fertility)\n",
    "\n",
    "# Compute p-value: p\n",
    "p = np.sum(perm_replicates >= r_obs)/10000 \n",
    "print('p-val =', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You got a p-value of zero. In hacker statistics, this means that your p-value is very low, since you never got a single replicate in the 10,000 you took that had a Pearson correlation greater than the observed one. You could try increasing the number of replicates you take to continue to move the upper bound on your p-value lower and lower."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "control = np.array([ 4.159234,  4.408002,  0.172812,  3.498278,  3.104912,  5.164174,\n",
    "        6.615262,  4.633066,  0.170408,  2.65    ,  0.0875  ,  1.997148,\n",
    "        6.92668 ,  4.574932,  3.896466,  5.209814,  3.70625 ,  0.      ,\n",
    "        4.62545 ,  3.01444 ,  0.732652,  0.4     ,  6.518382,  5.225   ,\n",
    "        6.218742,  6.840358,  1.211308,  0.368252,  3.59937 ,  4.212158,\n",
    "        6.052364,  2.115532,  6.60413 ,  5.26074 ,  6.05695 ,  6.481172,\n",
    "        3.171522,  3.057228,  0.218808,  5.215112,  4.465168,  2.28909 ,\n",
    "        3.732572,  2.17087 ,  1.834326,  6.074862,  5.841978,  8.524892,\n",
    "        4.698492,  2.965624,  2.324206,  3.409412,  4.830726,  0.1     ,\n",
    "        0.      ,  4.101432,  3.478162,  1.009688,  4.999296,  4.32196 ,\n",
    "        0.299592,  3.606032,  7.54026 ,  4.284024,  0.057494,  6.036668,\n",
    "        2.924084,  4.150144,  1.256926,  4.666502,  4.806594,  2.52478 ,\n",
    "        2.027654,  2.52283 ,  4.735598,  2.033236,  0.      ,  6.177294,\n",
    "        2.601834,  3.544408,  3.6045  ,  5.520346,  4.80698 ,  3.002478,\n",
    "        3.559816,  7.075844, 10.      ,  0.139772,  6.17171 ,  3.201232,\n",
    "        8.459546,  0.17857 ,  7.088276,  5.496662,  5.415086,  1.932282,\n",
    "        3.02838 ,  7.47996 ,  1.86259 ,  7.838498,  2.242718,  3.292958,\n",
    "        6.363644,  4.386898,  8.47533 ,  4.156304,  1.463956,  4.533628,\n",
    "        5.573922,  1.29454 ,  7.547504,  3.92466 ,  5.820258,  4.118522,\n",
    "        4.125   ,  2.286698,  0.591882,  1.273124,  0.      ,  0.      ,\n",
    "        0.      , 12.22502 ,  7.601604,  5.56798 ,  1.679914,  8.77096 ,\n",
    "        5.823942,  0.258374,  0.      ,  5.899236,  5.486354,  2.053148,\n",
    "        3.25541 ,  2.72564 ,  3.364066,  2.43427 ,  5.282548,  3.963666,\n",
    "        0.24851 ,  0.347916,  4.046862,  5.461436,  4.066104,  0.      ,\n",
    "        0.065   ])\n",
    "\n",
    "treated = np.array([1.342686, 1.058476, 3.793784, 0.40428 , 4.528388, 2.142966,\n",
    "       3.937742, 0.1375  , 6.919164, 0.      , 3.597812, 5.196538,\n",
    "       2.78955 , 2.3229  , 1.090636, 5.323916, 1.021618, 0.931836,\n",
    "       2.78    , 0.412202, 1.180934, 2.8674  , 0.      , 0.064354,\n",
    "       3.008348, 0.876634, 0.      , 4.971712, 7.280658, 4.79732 ,\n",
    "       2.084956, 3.251514, 1.9405  , 1.566192, 0.58894 , 5.219658,\n",
    "       0.977976, 3.124584, 1.297564, 1.433328, 4.24337 , 0.880964,\n",
    "       2.376566, 3.763658, 1.918426, 3.74    , 3.841726, 4.69964 ,\n",
    "       4.386876, 0.      , 1.127432, 1.845452, 0.690314, 4.185602,\n",
    "       2.284732, 7.237594, 2.185148, 2.799124, 3.43218 , 0.63354 ,\n",
    "       1.142496, 0.586   , 2.372858, 1.80032 , 3.329306, 4.028804,\n",
    "       3.474156, 7.508752, 2.032824, 1.336556, 1.906496, 1.396046,\n",
    "       2.488104, 4.759114, 1.07853 , 3.19927 , 3.814252, 4.275962,\n",
    "       2.817056, 0.552198, 3.27194 , 5.11525 , 2.064628, 0.      ,\n",
    "       3.34101 , 6.177322, 0.      , 3.66415 , 2.352582, 1.531696])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Do neonicotinoid insecticides have unintended consequences?\n",
    "As a final exercise in hypothesis testing before we put everything together in our case study in the next chapter, you will investigate the effects of neonicotinoid insecticides on bee reproduction. These insecticides are very widely used in the United States to combat aphids and other pests that damage plants.\n",
    "\n",
    "In a recent study, Straub, et al. (Proc. Roy. Soc. B, 2016) investigated the effects of neonicotinoids on the sperm of pollinating bees. In this and the next exercise, you will study how the pesticide treatment affected the count of live sperm per half milliliter of semen.\n",
    "\n",
    "First, we will do EDA, as usual. Plot ECDFs of the alive sperm count for untreated bees (stored in the Numpy array control) and bees treated with pesticide (stored in the Numpy array treated)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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BJ7nsWnTJns3q82c9TMCMJcsnjVrFh5++GEMHz681a/jNAGhbn2FuvUXOqITJ07g8ccfx4svvojJkyfbuzlt9u233+LIkSOYNGkS1q1bh/3792PlypX2blabdO/eHSNHjkS3bt3g5uaG++67r0OPTAHg8OHDGDlyJPz8/ODi4oKEhAT89NNP9m5WmznjZwQA/P7775g2bRomT56MZ599tk2v5TQBISoqCkePHkVRUREqKiqQnJzc4voKjiQnJwfPPvss1qxZg9jYWHs3xyY2b96MPXv2YNeuXZg7dy7GjRuHxYsX27tZbTJ27FgcPnwYJSUlEEURhw4dwoABA+zdrDYJDw9HSkoKysvLwRjD/v37ERERYe9mtdnAgQNx4cIFXLp0CaIoYs+ePR36MwIw7zh68skn8fzzz+OJJ55o8+s5zRpCQEAA5s2bh5kzZ8r1FyIjI+3drFbbtGkTqqqqsGrVKvm2adOmYfr06XZsFalr4MCBeOqpp5CYmIiamhqMGjUKDz/8sL2b1SajR4/Gr7/+ioSEBOh0OkRERODpp5+2d7PazNXVFatWrcJzzz2HqqoqREdHY8KECfZuVpts374dV69exebNm7F582YAwLhx4/D888+36vWoHgIhhBAATjRlRAghpG0oIBBCCAFAAYEQQkgtCgiEEEIAUEAghBBSiwICaZO0tDTMnTsXALBo0SL5RGtYWBiKiorwww8/2DUDaFlZGaZNm4bY2FgkJyc36zlXrlzB4MGDAQCff/45PvjgAzWb2ClZ/46J43CacwjEPiIiIrBu3bpG77/33ntx7733tmOLlM6dO4fCwkJ89913rXo+nfsgnQkFBNKgH3/8EX/729/Qo0cPXLhwAe7u7nj66afxySef4MKFC4iJicHixYvx448/4rXXXsOePXsafJ2dO3di3759eP/995Gbm4tXXnkFRqMRjDE89NBDeOqpp3DlyhU8/vjjiI6OxpkzZ1BSUoL58+fj/vvvx++//44lS5aguroajDFMmTIFM2bMqPc+33//Pd555x1IkgRPT0+8/PLL8PLywuLFi5GXl4dJkyZh69atcHNzk59z+vRpvPXWW6iurkZBQQGioqLqpdJYv349iouLMW7cOLz55pvYvXs3AKCkpAT33nsvvv/+e1RWVuLVV19FTk4OampqEBsb22A21+TkZGzYsAEcx0Gj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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute x,y values for ECDFs\n",
    "x_control, y_control = ecdf(control)\n",
    "x_treated, y_treated = ecdf(treated)\n",
    "\n",
    "# Plot the ECDFs\n",
    "plt.plot(x_control, y_control, marker='.', linestyle='none')\n",
    "plt.plot(x_treated, y_treated, marker='.', linestyle='none')\n",
    "\n",
    "# Set the margins\n",
    "plt.margins(0.02)\n",
    "\n",
    "# Add a legend\n",
    "plt.legend(('control', 'treated'), loc='lower right')\n",
    "\n",
    "# Label axes and show plot\n",
    "plt.xlabel('millions of alive sperm per mL')\n",
    "plt.ylabel('ECDF')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ECDFs show a pretty clear difference between the treatment and control; treated bees have fewer alive sperm. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Bootstrap hypothesis test on bee sperm counts\n",
    "Now, you will test the following hypothesis: On average, male bees treated with neonicotinoid insecticide have the same number of active sperm per milliliter of semen than do untreated male bees. You will use the difference of means as your test statistic.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value = 0.0001\n"
     ]
    }
   ],
   "source": [
    "# Compute the difference in mean sperm count: diff_means\n",
    "diff_means = np.mean(control) - np.mean(treated)\n",
    "\n",
    "# Compute mean of pooled data: mean_count\n",
    "mean_count = np.mean(np.concatenate([control, treated]))\n",
    "\n",
    "# Generate shifted data sets\n",
    "control_shifted = control - np.mean(control) + mean_count\n",
    "treated_shifted = treated - np.mean(treated) + mean_count\n",
    "\n",
    "# Generate bootstrap replicates\n",
    "bs_reps_control = draw_bs_reps(control_shifted,\n",
    "                       np.mean, size=10000)\n",
    "bs_reps_treated = draw_bs_reps(treated_shifted,\n",
    "                       np.mean, size=10000)\n",
    "\n",
    "# Get replicates of difference of means: bs_replicates\n",
    "bs_replicates = bs_reps_control - bs_reps_treated\n",
    "\n",
    "# Compute and print p-value: p\n",
    "p = np.sum(bs_replicates >= np.mean(control) - np.mean(treated)) \\\n",
    "            / len(bs_replicates)\n",
    "print('p-value =', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The p-value is small, most likely less than 0.0001, since you never saw a bootstrap replicated with a difference of means at least as extreme as what was observed. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Every year for the past 40-plus years, Peter and Rosemary Grant have gone to the Galápagos island of Daphne Major and collected data on Darwin's finches. Using your skills in statistical inference, you will spend this chapter with their data, and witness first hand, through data, evolution in action."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MINI PROJECT\n",
    "##### Finch beaks and the need for statistics\n",
    "You will immerse yourself in what is in my opinion one of the most fascinating data sets out there. You may know that many of the important observations that led Charles Darwin to develop the theory of evolution were made in the Galápagos archipelago, particularly in the study of the small birds, called finches, that inhabit them. The islands are ideal for studying evolution because they are isolated so they do not have complicated effects from interactions with other species including humans. Furthermore, some of them are small, so entire populations can be monitored on a given island. Every year since 1973, Peter and Rosemary Grant of Princeton University have been spending several months of the year on the tiny volcanic cinder cone island of Daphne Major in the Galápagos.\n",
    "This island has two dominant ground finch species, Geospiza fortis and Geospiza scandens. The Grants have monitored them every year, tagging them, making physiological measurements, taking samples for genetic sequencing, and more. In 2014,they published a book entitled \"40 Years of Evolution: Darwin's Finches on Daphne Major Island\". They generously placed all of their data on the Dryad data repository making it free for anyone to use. The data set is impressive and a great set for using data science and statistical inference to learn about evolution. You will work with the Grants' measurements of the beak length and beak depth. You will consider different aspects of the beak geometry, including how it varies over time, from species to species, and from parents to offspring. You will investigate how the beak depth of Geospiza scandens has changed over time. You will start with some exploratory analysis of the measurements of these species from 1975 and 2012. You will then perform a parameter estimation, with confidence intervals, of mean beak depth for those respective years. Finally, you will do a hypothesis test investigating if the mean beak depth has changed from 1975 to 2012.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   beak_depth  year\n",
      "0         8.4  1975\n",
      "1         8.8  1975\n",
      "2         8.4  1975\n",
      "3         8.0  1975\n",
      "4         7.9  1975\n"
     ]
    }
   ],
   "source": [
    "### Lets build up the dataset that we use with the entries \n",
    "\n",
    "year = [1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,\n",
    "       1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,\n",
    "       1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,\n",
    "       1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,\n",
    "       1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,\n",
    "       1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,\n",
    "       1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975,\n",
    "       1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 1975, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,\n",
    "       2012, 2012, 2012, 2012, 2012]\n",
    "\n",
    "beak_depth = [ 8.4 ,  8.8 ,  8.4 ,  8.  ,  7.9 ,  8.9 ,  8.6 ,  8.5 ,  8.9 ,\n",
    "        9.1 ,  8.6 ,  9.8 ,  8.2 ,  9.  ,  9.7 ,  8.6 ,  8.2 ,  9.  ,\n",
    "        8.4 ,  8.6 ,  8.9 ,  9.1 ,  8.3 ,  8.7 ,  9.6 ,  8.5 ,  9.1 ,\n",
    "        9.  ,  9.2 ,  9.9 ,  8.6 ,  9.2 ,  8.4 ,  8.9 ,  8.5 , 10.4 ,\n",
    "        9.6 ,  9.1 ,  9.3 ,  9.3 ,  8.8 ,  8.3 ,  8.8 ,  9.1 , 10.1 ,\n",
    "        8.9 ,  9.2 ,  8.5 , 10.2 , 10.1 ,  9.2 ,  9.7 ,  9.1 ,  8.5 ,\n",
    "        8.2 ,  9.  ,  9.3 ,  8.  ,  9.1 ,  8.1 ,  8.3 ,  8.7 ,  8.8 ,\n",
    "        8.6 ,  8.7 ,  8.  ,  8.8 ,  9.  ,  9.1 ,  9.74,  9.1 ,  9.8 ,\n",
    "       10.4 ,  8.3 ,  9.44,  9.04,  9.  ,  9.05,  9.65,  9.45,  8.65,\n",
    "        9.45,  9.45,  9.05,  8.75,  9.45,  8.35,  9.4 ,  8.9 ,  9.5 ,\n",
    "       11.  ,  8.7 ,  8.4 ,  9.1 ,  8.7 , 10.2 ,  9.6 ,  8.85,  8.8 ,\n",
    "        9.5 ,  9.2 ,  9.  ,  9.8 ,  9.3 ,  9.  , 10.2 ,  7.7 ,  9.  ,\n",
    "        9.5 ,  9.4 ,  8.  ,  8.9 ,  9.4 ,  9.5 ,  8.  , 10.  ,  8.95,\n",
    "        8.2 ,  8.8 ,  9.2 ,  9.4 ,  9.5 ,  8.1 ,  9.5 ,  8.4 ,  9.3 ,\n",
    "        9.3 ,  9.6 ,  9.2 , 10.  ,  8.9 , 10.5 ,  8.9 ,  8.6 ,  8.8 ,\n",
    "        9.15,  9.5 ,  9.1 , 10.2 ,  8.4 , 10.  , 10.2 ,  9.3 , 10.8 ,\n",
    "        8.3 ,  7.8 ,  9.8 ,  7.9 ,  8.9 ,  7.7 ,  8.9 ,  9.4 ,  9.4 ,\n",
    "        8.5 ,  8.5 ,  9.6 , 10.2 ,  8.8 ,  9.5 ,  9.3 ,  9.  ,  9.2 ,\n",
    "        8.7 ,  9.  ,  9.1 ,  8.7 ,  9.4 ,  9.8 ,  8.6 , 10.6 ,  9.  ,\n",
    "        9.5 ,  8.1 ,  9.3 ,  9.6 ,  8.5 ,  8.2 ,  8.  ,  9.5 ,  9.7 ,\n",
    "        9.9 ,  9.1 ,  9.5 ,  9.8 ,  8.4 ,  8.3 ,  9.6 ,  9.4 , 10.  ,\n",
    "        8.9 ,  9.1 ,  9.8 ,  9.3 ,  9.9 ,  8.9 ,  8.5 , 10.6 ,  9.3 ,\n",
    "        8.9 ,  8.9 ,  9.7 ,  9.8 , 10.5 ,  8.4 , 10.  ,  9.  ,  8.7 ,\n",
    "        8.8 ,  8.4 ,  9.3 ,  9.8 ,  8.9 ,  9.8 ,  9.1 ]\n",
    "\n",
    "col_labels = ['beak_depth', 'year']\n",
    "col_values = [beak_depth, year]\n",
    "zipped = zip(col_labels, col_values)\n",
    "data = dict(zipped)\n",
    "df = pd.DataFrame(data)\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beak_depth    float64\n",
       "year            int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  EDA of beak depths of Darwin's finches\n",
    "For your first foray into the Darwin finch data, you will study how the beak depth (the distance, top to bottom, of a closed beak) of the finch species Geospiza scandens has changed over time. The Grants have noticed some changes of beak geometry depending on the types of seeds available on the island, and they also noticed that there was some interbreeding with another major species on Daphne Major, Geospiza fortis. These effects can lead to changes in the species over time.\n",
    "\n",
    "In the next few problems, you will look at the beak depth of G. scandens on Daphne Major in 1975 and in 2012. To start with, let's plot all of the beak depth measurements in 1975 and 2012 in a bee swarm plot.\n",
    "\n",
    "The data are stored in a pandas DataFrame called df with columns 'year' and 'beak_depth'. The units of beak depth are millimeters (mm)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create bee swarm plot\n",
    "_ = sns.swarmplot(x = 'year', y = 'beak_depth', data = df)\n",
    "\n",
    "# Label the axes\n",
    "_ = plt.xlabel('year')\n",
    "_ = plt.ylabel('beak depth (mm)')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is kind of hard to see if there is a clear difference between the 1975 and 2012 data set. Eyeballing it, it appears as though the mean of the 2012 data set might be slightly higher, and it might have a bigger variance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### ECDFs of beak depths\n",
    "While bee swarm plots are useful, we found that ECDFs are often even better when doing EDA. Plot the ECDFs for the 1975 and 2012 beak depth measurements on the same plot.\n",
    "\n",
    "For your convenience, the beak depths for the respective years has been stored in the NumPy arrays bd_1975 and bd_2012."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 8.4   8.8   8.4   8.    7.9   8.9   8.6   8.5   8.9   9.1   8.6   9.8\n",
      "  8.2   9.    9.7   8.6   8.2   9.    8.4   8.6   8.9   9.1   8.3   8.7\n",
      "  9.6   8.5   9.1   9.    9.2   9.9   8.6   9.2   8.4   8.9   8.5  10.4\n",
      "  9.6   9.1   9.3   9.3   8.8   8.3   8.8   9.1  10.1   8.9   9.2   8.5\n",
      " 10.2  10.1   9.2   9.7   9.1   8.5   8.2   9.    9.3   8.    9.1   8.1\n",
      "  8.3   8.7   8.8   8.6   8.7   8.    8.8   9.    9.1   9.74  9.1   9.8\n",
      " 10.4   8.3   9.44  9.04  9.    9.05  9.65  9.45  8.65  9.45  9.45  9.05\n",
      "  8.75  9.45  8.35]\n"
     ]
    }
   ],
   "source": [
    "bd_1975 = df[df['year'] == 1975]['beak_depth'].to_numpy()\n",
    "print(bd_1975)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 9.4   8.9   9.5  11.    8.7   8.4   9.1   8.7  10.2   9.6   8.85  8.8\n",
      "  9.5   9.2   9.    9.8   9.3   9.   10.2   7.7   9.    9.5   9.4   8.\n",
      "  8.9   9.4   9.5   8.   10.    8.95  8.2   8.8   9.2   9.4   9.5   8.1\n",
      "  9.5   8.4   9.3   9.3   9.6   9.2  10.    8.9  10.5   8.9   8.6   8.8\n",
      "  9.15  9.5   9.1  10.2   8.4  10.   10.2   9.3  10.8   8.3   7.8   9.8\n",
      "  7.9   8.9   7.7   8.9   9.4   9.4   8.5   8.5   9.6  10.2   8.8   9.5\n",
      "  9.3   9.    9.2   8.7   9.    9.1   8.7   9.4   9.8   8.6  10.6   9.\n",
      "  9.5   8.1   9.3   9.6   8.5   8.2   8.    9.5   9.7   9.9   9.1   9.5\n",
      "  9.8   8.4   8.3   9.6   9.4  10.    8.9   9.1   9.8   9.3   9.9   8.9\n",
      "  8.5  10.6   9.3   8.9   8.9   9.7   9.8  10.5   8.4  10.    9.    8.7\n",
      "  8.8   8.4   9.3   9.8   8.9   9.8   9.1 ]\n"
     ]
    }
   ],
   "source": [
    "bd_2012 = df[df['year'] == 2012]['beak_depth'].to_numpy()\n",
    "print(bd_2012)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute ECDFs\n",
    "x_1975, y_1975 = ecdf(bd_1975)\n",
    "x_2012, y_2012 = ecdf(bd_2012)\n",
    "\n",
    "# Plot the ECDFs\n",
    "_ = plt.plot(x_1975, y_1975, marker='.', linestyle='none')\n",
    "_ = plt.plot(x_2012, y_2012, marker='.', linestyle='none')\n",
    "\n",
    "# Set margins\n",
    "plt.margins(0.02)\n",
    "\n",
    "# Add axis labels and legend\n",
    "_ = plt.xlabel('beak depth (mm)')\n",
    "_ = plt.ylabel('ECDF')\n",
    "_ = plt.legend(('1975', '2012'), loc='lower right')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The differences are much clearer in the ECDF. The mean is larger in the 2012 data, and the variance does appear larger as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "difference of means = 0.22622047244094645 mm\n",
      "95% confidence interval = [0.06125378 0.39522339] mm\n"
     ]
    }
   ],
   "source": [
    "# Compute the difference of the sample means: mean_diff\n",
    "mean_diff = np.mean(bd_2012) - np.mean(bd_1975)\n",
    "\n",
    "# Get bootstrap replicates of means\n",
    "bs_replicates_1975 = draw_bs_reps(bd_1975, np.mean, 10000)\n",
    "bs_replicates_2012 = draw_bs_reps(bd_2012, np.mean, 10000)\n",
    "\n",
    "# Compute samples of difference of means: bs_diff_replicates\n",
    "bs_diff_replicates = bs_replicates_2012 - bs_replicates_1975\n",
    "\n",
    "# Compute 95% confidence interval: conf_int\n",
    "conf_int = np.percentile(bs_diff_replicates,[2.5, 97.5])\n",
    "\n",
    "# Print the results\n",
    "print('difference of means =', mean_diff, 'mm')\n",
    "print('95% confidence interval =', conf_int, 'mm')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hypothesis test: Are beaks deeper in 2012?\n",
    "The plot of the ECDF and determination of the confidence interval make it pretty clear that the beaks of G. scandens on Daphne Major have gotten deeper. But is it possible that this effect is just due to random chance? In other words, what is the probability that we would get the observed difference in mean beak depth if the means were the same?\n",
    "\n",
    "Be careful! The hypothesis we are testing is not that the beak depths come from the same distribution. For that we could use a permutation test. The hypothesis is that the means are equal. To perform this hypothesis test, we need to shift the two data sets so that they have the same mean and then use bootstrap sampling to compute the difference of means."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p = 0.0039\n"
     ]
    }
   ],
   "source": [
    "# Compute mean of combined data set: combined_mean\n",
    "combined_mean = np.mean(np.concatenate((bd_1975, bd_2012)))\n",
    "\n",
    "# Shift the samples\n",
    "bd_1975_shifted = bd_1975 - np.mean(bd_1975) + combined_mean \n",
    "bd_2012_shifted = bd_2012 - np.mean(bd_2012) + combined_mean\n",
    "\n",
    "# Get bootstrap replicates of shifted data sets\n",
    "bs_replicates_1975 = draw_bs_reps(bd_1975_shifted, np.mean, 10000)\n",
    "bs_replicates_2012 = draw_bs_reps(bd_2012_shifted, np.mean, 10000)\n",
    "\n",
    "# Compute replicates of difference of means: bs_diff_replicates\n",
    "bs_diff_replicates = bs_replicates_2012 - bs_replicates_1975\n",
    "\n",
    "# Compute the p-value\n",
    "p = np.sum(bs_diff_replicates >= mean_diff) / len(bs_diff_replicates)\n",
    "\n",
    "# Print p-value\n",
    "print('p =', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We get a p-value of 0.0036, which suggests that there is a statistically significant difference. But remember: it is very important to know how different they are! In the previous exercise, you got a difference of 0.2 mm between the means. You should combine this with the statistical significance. Changing by 0.2 mm in 37 years is substantial by evolutionary standards. If it kept changing at that rate, the beak depth would double in only 400 years."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You just determined that the beak depth of Geospiza scandens changed over the course of 37 years. There are a few hypotheses as to why this is the case. One reason may be a drought in 1976 and 1977 that resulted in the death of the plants that produce small seeds on the island. The larger seeds required deeper beaks to crack them, so large-beaked birds survived and then reproduced. If this is the case, it stands to reason that the length of the beak might also change over time. Importantly, if the length and depth change at the same rate, the beak has the same shape; it just gets bigger. But if the beak length and beak depth change differently, the shape of the beak changes. In the next few exercises, you will investigate how beak length and depth change together. That means it's time for some linear regression!\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#beak length 1975\n",
    "bl_1975 = np.array([13.9 , 14.  , 12.9 , 13.5 , 12.9 , 14.6 , 13.  , 14.2 , 14.  ,\n",
    "       14.2 , 13.1 , 15.1 , 13.5 , 14.4 , 14.9 , 12.9 , 13.  , 14.9 ,\n",
    "       14.  , 13.8 , 13.  , 14.75, 13.7 , 13.8 , 14.  , 14.6 , 15.2 ,\n",
    "       13.5 , 15.1 , 15.  , 12.8 , 14.9 , 15.3 , 13.4 , 14.2 , 15.1 ,\n",
    "       15.1 , 14.  , 13.6 , 14.  , 14.  , 13.9 , 14.  , 14.9 , 15.6 ,\n",
    "       13.8 , 14.4 , 12.8 , 14.2 , 13.4 , 14.  , 14.8 , 14.2 , 13.5 ,\n",
    "       13.4 , 14.6 , 13.5 , 13.7 , 13.9 , 13.1 , 13.4 , 13.8 , 13.6 ,\n",
    "       14.  , 13.5 , 12.8 , 14.  , 13.4 , 14.9 , 15.54, 14.63, 14.73,\n",
    "       15.73, 14.83, 15.94, 15.14, 14.23, 14.15, 14.35, 14.95, 13.95,\n",
    "       14.05, 14.55, 14.05, 14.45, 15.05, 13.25])\n",
    "\n",
    "#beak length 2012\n",
    "bl_2012 = np.array([14.3 , 12.5 , 13.7 , 13.8 , 12.  , 13.  , 13.  , 13.6 , 12.8 ,\n",
    "       13.6 , 12.95, 13.1 , 13.4 , 13.9 , 12.3 , 14.  , 12.5 , 12.3 ,\n",
    "       13.9 , 13.1 , 12.5 , 13.9 , 13.7 , 12.  , 14.4 , 13.5 , 13.8 ,\n",
    "       13.  , 14.9 , 12.5 , 12.3 , 12.8 , 13.4 , 13.8 , 13.5 , 13.5 ,\n",
    "       13.4 , 12.3 , 14.35, 13.2 , 13.8 , 14.6 , 14.3 , 13.8 , 13.6 ,\n",
    "       12.9 , 13.  , 13.5 , 13.2 , 13.7 , 13.1 , 13.2 , 12.6 , 13.  ,\n",
    "       13.9 , 13.2 , 15.  , 13.37, 11.4 , 13.8 , 13.  , 13.  , 13.1 ,\n",
    "       12.8 , 13.3 , 13.5 , 12.4 , 13.1 , 14.  , 13.5 , 11.8 , 13.7 ,\n",
    "       13.2 , 12.2 , 13.  , 13.1 , 14.7 , 13.7 , 13.5 , 13.3 , 14.1 ,\n",
    "       12.5 , 13.7 , 14.6 , 14.1 , 12.9 , 13.9 , 13.4 , 13.  , 12.7 ,\n",
    "       12.1 , 14.  , 14.9 , 13.9 , 12.9 , 14.6 , 14.  , 13.  , 12.7 ,\n",
    "       14.  , 14.1 , 14.1 , 13.  , 13.5 , 13.4 , 13.9 , 13.1 , 12.9 ,\n",
    "       14.  , 14.  , 14.1 , 14.7 , 13.4 , 13.8 , 13.4 , 13.8 , 12.4 ,\n",
    "       14.1 , 12.9 , 13.9 , 14.3 , 13.2 , 14.2 , 13.  , 14.6 , 13.1 ,\n",
    "       15.2 ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make scatter plot of 1975 data\n",
    "_ = plt.plot(bl_1975, bd_1975, marker='.',\n",
    "             linestyle='None', color = 'blue', alpha = 0.5)\n",
    "\n",
    "# Make scatter plot of 2012 data\n",
    "_ = plt.plot(bl_2012, bd_2012, marker='.',\n",
    "            linestyle='None', color = 'red', alpha = 0.5)\n",
    "\n",
    "# Label axes and make legend\n",
    "_ = plt.xlabel('beak length (mm)')\n",
    "_ = plt.ylabel('beak depth (mm)')\n",
    "_ = plt.legend(('1975', '2012'), loc='upper left')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In looking at the plot, we see that beaks got deeper (the red points are higher up in the y-direction), but not really longer. If anything, they got a bit shorter, since the red dots are to the left of the blue dots. So, it does not look like the beaks kept the same shape; they became shorter and deeper."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linear regressions\n",
    "Perform a linear regression for both the 1975 and 2012 data. Then, perform pairs bootstrap estimates for the regression parameters. Report 95% confidence intervals on the slope and intercept of the regression line. We will use the draw_bs_pairs_linreg() function we wrote earlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1975: slope = 0.4652051691605937 conf int = [0.33717878 0.58707096]\n",
      "1975: intercept = 2.3908752365842267 conf int = [0.65557869 4.20991985]\n",
      "2012: slope = 0.462630358835313 conf int = [0.33212237 0.60162345]\n",
      "2012: intercept = 2.9772474982360198 conf int = [1.11598882 4.69396597]\n"
     ]
    }
   ],
   "source": [
    "# Compute the linear regressions\n",
    "slope_1975, intercept_1975 = np.polyfit(bl_1975, bd_1975, 1)\n",
    "slope_2012, intercept_2012 = np.polyfit(bl_2012, bd_2012, 1)\n",
    "\n",
    "# Perform pairs bootstrap for the linear regressions\n",
    "bs_slope_reps_1975, bs_intercept_reps_1975 = draw_bs_pairs_linreg(bl_1975, bd_1975, size = 1000)\n",
    "bs_slope_reps_2012, bs_intercept_reps_2012 = draw_bs_pairs_linreg(bl_2012, bd_2012, size = 1000)\n",
    "\n",
    "# Compute confidence intervals of slopes\n",
    "slope_conf_int_1975 = np.percentile(bs_slope_reps_1975, [2.5, 97.5])\n",
    "slope_conf_int_2012 = np.percentile(bs_slope_reps_2012, [2.5, 97.5])\n",
    "intercept_conf_int_1975 = np.percentile(bs_intercept_reps_1975, [2.5, 97.5])\n",
    "\n",
    "intercept_conf_int_2012 = np.percentile(bs_intercept_reps_2012, [2.5, 97.5])\n",
    "\n",
    "\n",
    "# Print the results\n",
    "print('1975: slope =', slope_1975,\n",
    "      'conf int =', slope_conf_int_1975)\n",
    "print('1975: intercept =', intercept_1975,\n",
    "      'conf int =', intercept_conf_int_1975)\n",
    "print('2012: slope =', slope_2012,\n",
    "      'conf int =', slope_conf_int_2012)\n",
    "print('2012: intercept =', intercept_2012,\n",
    "      'conf int =', intercept_conf_int_2012)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks like they have the same slope, but different intercepts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make scatter plot of 1975 data\n",
    "_ = plt.plot(bl_1975, bd_1975, marker='.',\n",
    "             linestyle='none', color='blue', alpha=0.5)\n",
    "\n",
    "# Make scatter plot of 2012 data\n",
    "_ = plt.plot(bl_2012, bd_2012, marker='.',\n",
    "             linestyle='none', color='red', alpha=0.5)\n",
    "\n",
    "# Label axes and make legend\n",
    "_ = plt.xlabel('beak length (mm)')\n",
    "_ = plt.ylabel('beak depth (mm)')\n",
    "_ = plt.legend(('1975', '2012'), loc='upper left')\n",
    "\n",
    "# Generate x-values for bootstrap lines: x\n",
    "x = np.array([10, 17])\n",
    "\n",
    "# Plot the bootstrap lines\n",
    "for i in range(100):\n",
    "    plt.plot(x, bs_slope_reps_1975[i] * x + bs_intercept_reps_1975[i],\n",
    "             linewidth=0.5, alpha=0.2, color='blue')\n",
    "    plt.plot(x, bs_slope_reps_2012[i] * x + bs_intercept_reps_2012[i],\n",
    "             linewidth=0.5, alpha=0.2, color='red')\n",
    "\n",
    "# Draw the plot again\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Beak length to depth ratio\n",
    "The linear regressions showed interesting information about the beak geometry. The slope was the same in 1975 and 2012, suggesting that for every millimeter gained in beak length, the birds gained about half a millimeter in depth in both years. However, if we are interested in the shape of the beak, we want to compare the ratio of beak length to beak depth. Let's make that comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1975: mean ratio = 1.5788823771858533 conf int = [1.55745896 1.60120103]\n",
      "2012: mean ratio = 1.4658342276847767 conf int = [1.4446832  1.48791755]\n"
     ]
    }
   ],
   "source": [
    "# Compute length-to-depth ratios\n",
    "ratio_1975 = bl_1975/bd_1975\n",
    "ratio_2012 = bl_2012/bd_2012\n",
    "\n",
    "# Compute means\n",
    "mean_ratio_1975 = np.mean(ratio_1975)\n",
    "mean_ratio_2012 = np.mean(ratio_2012)\n",
    "\n",
    "# Generate bootstrap replicates of the means\n",
    "bs_replicates_1975 = draw_bs_reps(ratio_1975, np.mean, 10000)\n",
    "bs_replicates_2012 = draw_bs_reps(ratio_2012, np.mean, 10000)\n",
    "\n",
    "# Compute the 99% confidence intervals\n",
    "conf_int_1975 = np.percentile(bs_replicates_1975, [0.5, 99.5])\n",
    "conf_int_2012 = np.percentile(bs_replicates_2012, [0.5, 99.5])\n",
    "\n",
    "# Print the results\n",
    "print('1975: mean ratio =', mean_ratio_1975,\n",
    "      'conf int =', conf_int_1975)\n",
    "print('2012: mean ratio =', mean_ratio_2012,\n",
    "      'conf int =', conf_int_2012)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The mean beak length-to-depth ratio decreased by about 0.1, or 7%, from 1975 to 2012. The 99% confidence intervals are not even close to overlapping, so this is a real change. The beak shape changed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Calculation of Heritability\n",
    "What is causing the beaks of Geospiza scandens to get bigger over time? I mentioned the selective pressure brought on by the drought. But why do some birds have such large beaks to begin with? A prevailing explanation is that scandens birds are mating the other major finch species on Daphne Major, Geopsiza fortis. These hybrid birds then mate with pure scandens, in a process called introgressive hybridization, which can bring fortis characteristics into the scandens species. This is similar to what likely happened to humans when they encountered neanderthals. In order assess the viability of this explanation, we need to know how strongly parental traits are passed on to offspring. In this last set of exercises, we will investigate the extent to which parental beak depth is inherited by offspring in both scandens and fortis. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### EDA of heritability\n",
    "The array bd_parent_scandens contains the average beak depth (in mm) of two parents of the species G. scandens. The array bd_offspring_scandens contains the average beak depth of the offspring of the respective parents. The arrays bd_parent_fortis and bd_offspring_fortis contain the same information about measurements from G. fortis birds.\n",
    "\n",
    "Make a scatter plot of the average offspring beak depth (y-axis) versus average parental beak depth (x-axis) for both species. Use the alpha=0.5 keyword argument to help you see overlapping points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "bd_parent_scandens = np.array([ 8.3318,  8.4035,  8.5317,  8.7202,  8.7089,  8.7541,  8.773 ,\n",
    "        8.8107,  8.7919,  8.8069,  8.6523,  8.6146,  8.6938,  8.7127,\n",
    "        8.7466,  8.7504,  8.7805,  8.7428,  8.7164,  8.8032,  8.8258,\n",
    "        8.856 ,  8.9012,  8.9125,  8.8635,  8.8258,  8.8522,  8.8974,\n",
    "        8.9427,  8.9879,  8.9615,  8.9238,  8.9351,  9.0143,  9.0558,\n",
    "        9.0596,  8.9917,  8.905 ,  8.9314,  8.9465,  8.9879,  8.9804,\n",
    "        9.0219,  9.052 ,  9.0407,  9.0407,  8.9955,  8.9992,  8.9992,\n",
    "        9.0747,  9.0747,  9.5385,  9.4781,  9.4517,  9.3537,  9.2707,\n",
    "        9.1199,  9.1689,  9.1425,  9.135 ,  9.1011,  9.1727,  9.2217,\n",
    "        9.2255,  9.2821,  9.3235,  9.3198,  9.3198,  9.3198,  9.3273,\n",
    "        9.3725,  9.3989,  9.4253,  9.4593,  9.4442,  9.4291,  9.2632,\n",
    "        9.2293,  9.1878,  9.1425,  9.1275,  9.1802,  9.1765,  9.2481,\n",
    "        9.2481,  9.1991,  9.1689,  9.1765,  9.2406,  9.3198,  9.3235,\n",
    "        9.1991,  9.2971,  9.2443,  9.316 ,  9.2934,  9.3914,  9.3989,\n",
    "        9.5121,  9.6176,  9.5535,  9.4668,  9.3725,  9.3348,  9.3763,\n",
    "        9.3839,  9.4216,  9.4065,  9.3348,  9.4442,  9.4367,  9.5083,\n",
    "        9.448 ,  9.4781,  9.595 ,  9.6101,  9.5686,  9.6365,  9.7119,\n",
    "        9.8213,  9.825 ,  9.7609,  9.6516,  9.5988,  9.546 ,  9.6516,\n",
    "        9.7572,  9.8854, 10.0023,  9.3914])\n",
    "\n",
    "bd_offspring_scandens = np.array([ 8.419 ,  9.2468,  8.1532,  8.0089,  8.2215,  8.3734,  8.5025,\n",
    "        8.6392,  8.7684,  8.8139,  8.7911,  8.9051,  8.9203,  8.8747,\n",
    "        8.943 ,  9.0038,  8.981 ,  9.0949,  9.2696,  9.1633,  9.1785,\n",
    "        9.1937,  9.2772,  9.0722,  8.9658,  8.9658,  8.5025,  8.4949,\n",
    "        8.4949,  8.5633,  8.6013,  8.6468,  8.1532,  8.3734,  8.662 ,\n",
    "        8.6924,  8.7456,  8.8367,  8.8595,  8.9658,  8.9582,  8.8671,\n",
    "        8.8671,  8.943 ,  9.0646,  9.1405,  9.2089,  9.2848,  9.3759,\n",
    "        9.4899,  9.4519,  8.1228,  8.2595,  8.3127,  8.4949,  8.6013,\n",
    "        8.4646,  8.5329,  8.7532,  8.8823,  9.0342,  8.6392,  8.6772,\n",
    "        8.6316,  8.7532,  8.8291,  8.8975,  8.9734,  9.0494,  9.1253,\n",
    "        9.1253,  9.1253,  9.1785,  9.2848,  9.4595,  9.3608,  9.2089,\n",
    "        9.2544,  9.3684,  9.3684,  9.2316,  9.1709,  9.2316,  9.0342,\n",
    "        8.8899,  8.8291,  8.981 ,  8.8975, 10.4089, 10.1886,  9.7633,\n",
    "        9.7329,  9.6114,  9.5051,  9.5127,  9.3684,  9.6266,  9.5354,\n",
    "       10.0215, 10.0215,  9.6266,  9.6038,  9.4063,  9.2316,  9.338 ,\n",
    "        9.262 ,  9.262 ,  9.4063,  9.4367,  9.0342,  8.943 ,  8.9203,\n",
    "        8.7835,  8.7835,  9.057 ,  8.9354,  8.8975,  8.8139,  8.8671,\n",
    "        9.0873,  9.2848,  9.2392,  9.2924,  9.4063,  9.3152,  9.4899,\n",
    "        9.5962,  9.6873,  9.5203,  9.6646])\n",
    "\n",
    "bd_parent_fortis = np.array([10.1  ,  9.55 ,  9.4  , 10.25 , 10.125,  9.7  ,  9.05 ,  7.4  ,\n",
    "        9.   ,  8.65 ,  9.625,  9.9  ,  9.55 ,  9.05 ,  8.35 , 10.1  ,\n",
    "       10.1  ,  9.9  , 10.225, 10.   , 10.55 , 10.45 ,  9.2  , 10.2  ,\n",
    "        8.95 , 10.05 , 10.2  ,  9.5  ,  9.925,  9.95 , 10.05 ,  8.75 ,\n",
    "        9.2  , 10.15 ,  9.8  , 10.7  , 10.5  ,  9.55 , 10.55 , 10.475,\n",
    "        8.65 , 10.7  ,  9.1  ,  9.4  , 10.3  ,  9.65 ,  9.5  ,  9.7  ,\n",
    "       10.525,  9.95 , 10.1  ,  9.75 , 10.05 ,  9.9  , 10.   ,  9.1  ,\n",
    "        9.45 ,  9.25 ,  9.5  , 10.   , 10.525,  9.9  , 10.4  ,  8.95 ,\n",
    "        9.4  , 10.95 , 10.75 , 10.1  ,  8.05 ,  9.1  ,  9.55 ,  9.05 ,\n",
    "       10.2  , 10.   , 10.55 , 10.75 ,  8.175,  9.7  ,  8.8  , 10.75 ,\n",
    "        9.3  ,  9.7  ,  9.6  ,  9.75 ,  9.6  , 10.45 , 11.   , 10.85 ,\n",
    "       10.15 , 10.35 , 10.4  ,  9.95 ,  9.1  , 10.1  ,  9.85 ,  9.625,\n",
    "        9.475,  9.   ,  9.25 ,  9.1  ,  9.25 ,  9.2  ,  9.95 ,  8.65 ,\n",
    "        9.8  ,  9.4  ,  9.   ,  8.55 ,  8.75 ,  9.65 ,  8.95 ,  9.15 ,\n",
    "        9.85 , 10.225,  9.825, 10.   ,  9.425, 10.4  ,  9.875,  8.95 ,\n",
    "        8.9  ,  9.35 , 10.425, 10.   , 10.175,  9.875,  9.875,  9.15 ,\n",
    "        9.45 ,  9.025,  9.7  ,  9.7  , 10.05 , 10.3  ,  9.6  , 10.   ,\n",
    "        9.8  , 10.05 ,  8.75 , 10.55 ,  9.7  , 10.   ,  9.85 ,  9.8  ,\n",
    "        9.175,  9.65 ,  9.55 ,  9.9  , 11.55 , 11.3  , 10.4  , 10.8  ,\n",
    "        9.8  , 10.45 , 10.   , 10.75 ,  9.35 , 10.75 ,  9.175,  9.65 ,\n",
    "        8.8  , 10.55 , 10.675,  9.95 ,  9.55 ,  8.825,  9.7  ,  9.85 ,\n",
    "        9.8  ,  9.55 ,  9.275, 10.325,  9.15 ,  9.35 ,  9.15 ,  9.65 ,\n",
    "       10.575,  9.975,  9.55 ,  9.2  ,  9.925,  9.2  ,  9.3  ,  8.775,\n",
    "        9.325,  9.175,  9.325,  8.975,  9.7  ,  9.5  , 10.225, 10.025,\n",
    "        8.2  ,  8.2  ,  9.55 ,  9.05 ,  9.6  ,  9.6  , 10.15 ,  9.875,\n",
    "       10.485, 11.485, 10.985,  9.7  ,  9.65 ,  9.35 , 10.05 , 10.1  ,\n",
    "        9.9  ,  8.95 ,  9.3  ,  9.95 ,  9.45 ,  9.5  ,  8.45 ,  8.8  ,\n",
    "        8.525,  9.375, 10.2  ,  7.625,  8.375,  9.25 ,  9.4  , 10.55 ,\n",
    "        8.9  ,  8.8  ,  9.   ,  8.575,  8.575,  9.6  ,  9.375,  9.6  ,\n",
    "        9.95 ,  9.6  , 10.2  ,  9.85 ,  9.625,  9.025, 10.375, 10.25 ,\n",
    "        9.3  ,  9.5  ,  9.55 ,  8.55 ,  9.05 ,  9.9  ,  9.8  ,  9.75 ,\n",
    "       10.25 ,  9.1  ,  9.65 , 10.3  ,  8.9  ,  9.95 ,  9.5  ,  9.775,\n",
    "        9.425,  7.75 ,  7.55 ,  9.1  ,  9.6  ,  9.575,  8.95 ,  9.65 ,\n",
    "        9.65 ,  9.65 ,  9.525,  9.85 ,  9.05 ,  9.3  ,  8.9  ,  9.45 ,\n",
    "       10.   ,  9.85 ,  9.25 , 10.1  ,  9.125,  9.65 ,  9.1  ,  8.05 ,\n",
    "        7.4  ,  8.85 ,  9.075,  9.   ,  9.7  ,  8.7  ,  9.45 ,  9.7  ,\n",
    "        8.35 ,  8.85 ,  9.7  ,  9.45 , 10.3  , 10.   , 10.45 ,  9.45 ,\n",
    "        8.5  ,  8.3  , 10.   ,  9.225,  9.75 ,  9.15 ,  9.55 ,  9.   ,\n",
    "        9.275,  9.35 ,  8.95 ,  9.875,  8.45 ,  8.6  ,  9.7  ,  8.55 ,\n",
    "        9.05 ,  9.6  ,  8.65 ,  9.2  ,  8.95 ,  9.6  ,  9.15 ,  9.4  ,\n",
    "        8.95 ,  9.95 , 10.55 ,  9.7  ,  8.85 ,  8.8  , 10.   ,  9.05 ,\n",
    "        8.2  ,  8.1  ,  7.25 ,  8.3  ,  9.15 ,  8.6  ,  9.5  ,  8.05 ,\n",
    "        9.425,  9.3  ,  9.8  ,  9.3  ,  9.85 ,  9.5  ,  8.65 ,  9.825,\n",
    "        9.   , 10.45 ,  9.1  ,  9.55 ,  9.05 , 10.   ,  9.35 ,  8.375,\n",
    "        8.3  ,  8.8  , 10.1  ,  9.5  ,  9.75 , 10.1  ,  9.575,  9.425,\n",
    "        9.65 ,  8.725,  9.025,  8.5  ,  8.95 ,  9.3  ,  8.85 ,  8.95 ,\n",
    "        9.8  ,  9.5  ,  8.65 ,  9.1  ,  9.4  ,  8.475,  9.35 ,  7.95 ,\n",
    "        9.35 ,  8.575,  9.05 ,  8.175,  9.85 ,  7.85 ,  9.85 , 10.1  ,\n",
    "        9.35 ,  8.85 ,  8.75 ,  9.625,  9.25 ,  9.55 , 10.325,  8.55 ,\n",
    "        9.675,  9.15 ,  9.   ,  9.65 ,  8.6  ,  8.8  ,  9.   ,  9.95 ,\n",
    "        8.4  ,  9.35 , 10.3  ,  9.05 ,  9.975,  9.975,  8.65 ,  8.725,\n",
    "        8.2  ,  7.85 ,  8.775,  8.5  ,  9.4  ])\n",
    "\n",
    "bd_offspring_fortis = np.array([10.7 ,  9.78,  9.48,  9.6 , 10.27,  9.5 ,  9.  ,  7.46,  7.65,\n",
    "        8.63,  9.81,  9.4 ,  9.48,  8.75,  7.6 , 10.  , 10.09,  9.74,\n",
    "        9.64,  8.49, 10.15, 10.28,  9.2 , 10.01,  9.03,  9.94, 10.5 ,\n",
    "        9.7 , 10.02, 10.04,  9.43,  8.1 ,  9.5 ,  9.9 ,  9.48, 10.18,\n",
    "       10.16,  9.08, 10.39,  9.9 ,  8.4 , 10.6 ,  8.75,  9.46,  9.6 ,\n",
    "        9.6 ,  9.95, 10.05, 10.16, 10.1 ,  9.83,  9.46,  9.7 ,  9.82,\n",
    "       10.34,  8.02,  9.65,  9.87,  9.  , 11.14,  9.25,  8.14, 10.23,\n",
    "        8.7 ,  9.8 , 10.54, 11.19,  9.85,  8.1 ,  9.3 ,  9.34,  9.19,\n",
    "        9.52,  9.36,  8.8 ,  8.6 ,  8.  ,  8.5 ,  8.3 , 10.38,  8.54,\n",
    "        8.94, 10.  ,  9.76,  9.45,  9.89, 10.9 ,  9.91,  9.39,  9.86,\n",
    "        9.74,  9.9 ,  9.09,  9.69, 10.24,  8.9 ,  9.67,  8.93,  9.3 ,\n",
    "        8.67,  9.15,  9.23,  9.59,  9.03,  9.58,  8.97,  8.57,  8.47,\n",
    "        8.71,  9.21,  9.13,  8.5 ,  9.58,  9.21,  9.6 ,  9.32,  8.7 ,\n",
    "       10.46,  9.29,  9.24,  9.45,  9.35, 10.19,  9.91,  9.18,  9.89,\n",
    "        9.6 , 10.3 ,  9.45,  8.79,  9.2 ,  8.8 ,  9.69, 10.61,  9.6 ,\n",
    "        9.9 ,  9.26, 10.2 ,  8.79,  9.28,  8.83,  9.76, 10.2 ,  9.43,\n",
    "        9.4 ,  9.9 ,  9.5 ,  8.95,  9.98,  9.72,  9.86, 11.1 ,  9.14,\n",
    "       10.49,  9.75, 10.35,  9.73,  9.83,  8.69,  9.58,  8.42,  9.25,\n",
    "       10.12,  9.31,  9.99,  8.59,  8.74,  8.79,  9.6 ,  9.52,  8.93,\n",
    "       10.23,  9.35,  9.35,  9.09,  9.04,  9.75, 10.5 ,  9.09,  9.05,\n",
    "        9.54,  9.3 ,  9.06,  8.7 ,  9.32,  8.4 ,  8.67,  8.6 ,  9.53,\n",
    "        9.77,  9.65,  9.43,  8.35,  8.26,  9.5 ,  8.6 ,  9.57,  9.14,\n",
    "       10.79,  8.91,  9.93, 10.7 ,  9.3 ,  9.93,  9.51,  9.44, 10.05,\n",
    "       10.13,  9.24,  8.21,  8.9 ,  9.34,  8.77,  9.4 ,  8.82,  8.83,\n",
    "        8.6 ,  9.5 , 10.2 ,  8.09,  9.07,  9.29,  9.1 , 10.19,  9.25,\n",
    "        8.98,  9.02,  8.6 ,  8.25,  8.7 ,  9.9 ,  9.65,  9.45,  9.38,\n",
    "       10.4 ,  9.96,  9.46,  8.26, 10.05,  8.92,  9.5 ,  9.43,  8.97,\n",
    "        8.44,  8.92, 10.3 ,  8.4 ,  9.37,  9.91, 10.  ,  9.21,  9.95,\n",
    "        8.84,  9.82,  9.5 , 10.29,  8.4 ,  8.31,  9.29,  8.86,  9.4 ,\n",
    "        9.62,  8.62,  8.3 ,  9.8 ,  8.48,  9.61,  9.5 ,  9.37,  8.74,\n",
    "        9.31,  9.5 ,  9.49,  9.74,  9.2 ,  9.24,  9.7 ,  9.64,  9.2 ,\n",
    "        7.5 ,  7.5 ,  8.7 ,  8.31,  9.  ,  9.74,  9.31, 10.5 ,  9.3 ,\n",
    "        8.12,  9.34,  9.72,  9.  ,  9.65,  9.9 , 10.  , 10.1 ,  8.  ,\n",
    "        9.07,  9.75,  9.33,  8.11,  9.36,  9.74,  9.9 ,  9.23,  9.7 ,\n",
    "        8.2 ,  9.35,  9.49,  9.34,  8.87,  9.03,  9.07,  9.43,  8.2 ,\n",
    "        9.19,  9.  ,  9.2 ,  9.06,  9.81,  8.89,  9.4 , 10.45,  9.64,\n",
    "        9.03,  8.71,  9.91,  8.33,  8.2 ,  7.83,  7.14,  8.91,  9.18,\n",
    "        8.8 ,  9.9 ,  7.73,  9.25,  8.7 ,  9.5 ,  9.3 ,  9.05, 10.18,\n",
    "        8.85,  9.24,  9.15,  9.98,  8.77,  9.8 ,  8.65, 10.  ,  8.81,\n",
    "        8.01,  7.9 ,  9.41, 10.18,  9.55,  9.08,  8.4 ,  9.75,  8.9 ,\n",
    "        9.07,  9.35,  8.9 ,  8.19,  8.65,  9.19,  8.9 ,  9.28, 10.58,\n",
    "        9.  ,  9.4 ,  8.91,  9.93, 10.  ,  9.37,  7.4 ,  9.  ,  8.8 ,\n",
    "        9.18,  8.3 , 10.08,  7.9 ,  9.96, 10.4 ,  9.65,  8.8 ,  8.65,\n",
    "        9.7 ,  9.23,  9.43,  9.93,  8.47,  9.55,  9.28,  8.85,  8.9 ,\n",
    "        8.75,  8.63,  9.  ,  9.43,  8.28,  9.23, 10.4 ,  9.  ,  9.8 ,\n",
    "        9.77,  8.97,  8.37,  7.7 ,  7.9 ,  9.5 ,  8.2 ,  8.8 ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make scatter plots\n",
    "_ = plt.plot(bd_parent_fortis, bd_offspring_fortis,\n",
    "             marker= '.', linestyle= 'none', color= 'blue', alpha= 0.5)\n",
    "_ = plt.plot(bd_parent_scandens, bd_offspring_scandens,\n",
    "             marker= '.', linestyle= 'none', color= 'red', alpha= 0.5)\n",
    "\n",
    "# Label axes\n",
    "_ = plt.xlabel('parental beak depth (mm)')\n",
    "_ = plt.ylabel('offspring beak depth (mm)')\n",
    "\n",
    "# Add legend\n",
    "_ = plt.legend(('G. fortis', 'G. scandens'), loc='lower right')\n",
    "\n",
    "# Show plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It appears as though there is a stronger correlation in G. fortis than in G. scandens. This suggests that beak depth is more strongly inherited in G. fortis. We'll quantify this correlation next."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Correlation of offspring and parental data\n",
    "In an effort to quantify the correlation between offspring and parent beak depths, we would like to compute statistics, such as the Pearson correlation coefficient, between parents and offspring. To get confidence intervals on this, we need to do a pairs bootstrap.\n",
    "\n",
    "You have already written a function to do pairs bootstrap to get estimates for parameters derived from linear regression. Your task in this exercise is to make a new function with call signature draw_bs_pairs(x, y, func, size=1) that performs pairs bootstrap and computes a single statistic on pairs samples defined. The statistic of interest is computed by calling func(bs_x, bs_y). In the next exercise, you will use pearson_r for func."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_bs_pairs(x, y, func, size=1):\n",
    "    \"\"\"Perform pairs bootstrap for a single statistic.\"\"\"\n",
    "\n",
    "    # Set up array of indices to sample from: inds\n",
    "    inds = np.arange(len(x))\n",
    "\n",
    "    # Initialize replicates: bs_replicates\n",
    "    bs_replicates = np.empty(size)\n",
    "\n",
    "    # Generate replicates\n",
    "    for i in range(size):\n",
    "        bs_inds = np.random.choice(inds, len(inds))\n",
    "        bs_x, bs_y = x[bs_inds], y[bs_inds]\n",
    "        bs_replicates[i] = func(bs_x, bs_y)\n",
    "\n",
    "    return bs_replicates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Pearson correlation of offspring and parental data\n",
    "The Pearson correlation coefficient seems like a useful measure of how strongly the beak depth of parents are inherited by their offspring. Compute the Pearson correlation coefficient between parental and offspring beak depths for G. scandens. Do the same for G. fortis. Then, use the function you wrote in the last exercise to compute a 95% confidence interval using pairs bootstrap.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "G. scandens: 0.4117063629401258 [0.2789613  0.54351692]\n",
      "G. fortis: 0.7283412395518486 [0.67156703 0.78002599]\n"
     ]
    }
   ],
   "source": [
    "# Compute the Pearson correlation coefficients\n",
    "r_scandens = pearson_r(bd_parent_scandens, bd_offspring_scandens)\n",
    "r_fortis = pearson_r(bd_parent_fortis, bd_offspring_fortis)\n",
    "\n",
    "# Acquire 1000 bootstrap replicates of Pearson r\n",
    "bs_replicates_scandens = draw_bs_pairs(\n",
    "        bd_parent_scandens, bd_offspring_scandens, pearson_r, size=1000)\n",
    "bs_replicates_fortis = draw_bs_pairs(\n",
    "        bd_parent_fortis, bd_offspring_fortis, pearson_r, size=1000)\n",
    "\n",
    "# Compute 95% confidence intervals\n",
    "conf_int_scandens = np.percentile(bs_replicates_scandens, [2.5, 97.5])\n",
    "conf_int_fortis = np.percentile(bs_replicates_fortis, [2.5, 97.5])\n",
    "\n",
    "# Print results\n",
    "print('G. scandens:', r_scandens, conf_int_scandens)\n",
    "print('G. fortis:', r_fortis, conf_int_fortis)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is clear from the confidence intervals that beak depth of the offspring of G. fortis parents is more strongly correlated with their offspring than their G. scandens counterparts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Measuring heritability\n",
    "Remember that the Pearson correlation coefficient is the ratio of the covariance to the geometric mean of the variances of the two data sets. This is a measure of the correlation between parents and offspring, but might not be the best estimate of heritability. If we stop and think, it makes more sense to define heritability as the ratio of the covariance between parent and offspring to the variance of the parents alone. In this exercise, you will estimate the heritability and perform a pairs bootstrap calculation to get the 95% confidence interval.\n",
    "\n",
    "This exercise highlights a very important point. Statistical inference (and data analysis in general) is not a plug-n-chug enterprise. You need to think carefully about the questions you are seeking to answer with your data and analyze them appropriately. If you are interested in how heritable traits are, the quantity we defined as the heritability is more apt than the off-the-shelf statistic, the Pearson correlation coefficient."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "G. scandens: 0.5485340868685982 [0.35951018 0.74859535]\n",
      "G. fortis: 0.7229051911438155 [0.64857567 0.79150311]\n"
     ]
    }
   ],
   "source": [
    "def heritability(parents, offspring):\n",
    "    \"\"\"Compute the heritability from parent and offspring samples.\"\"\"\n",
    "    covariance_matrix = np.cov(parents, offspring)\n",
    "    return covariance_matrix[0,1]/ covariance_matrix[0,0]\n",
    "\n",
    "# Compute the heritability\n",
    "heritability_scandens = heritability(bd_parent_scandens, bd_offspring_scandens)\n",
    "heritability_fortis = heritability(bd_parent_fortis, bd_offspring_fortis)\n",
    "\n",
    "# Acquire 1000 bootstrap replicates of heritability\n",
    "replicates_scandens = draw_bs_pairs(bd_parent_scandens, bd_offspring_scandens, heritability, size= 1000)\n",
    "        \n",
    "replicates_fortis = draw_bs_pairs(bd_parent_fortis, bd_offspring_fortis, heritability, size= 1000)\n",
    "\n",
    "\n",
    "# Compute 95% confidence intervals\n",
    "conf_int_scandens = np.percentile(replicates_scandens, [2.5, 97.5])\n",
    "conf_int_fortis = np.percentile(replicates_fortis, [2.5, 97.5])\n",
    "\n",
    "# Print results\n",
    "print('G. scandens:', heritability_scandens, conf_int_scandens)\n",
    "print('G. fortis:', heritability_fortis, conf_int_fortis)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Is beak depth heritable at all in G. scandens?\n",
    "The heritability of beak depth in G. scandens seems low. It could be that this observed heritability was just achieved by chance and beak depth is actually not really heritable in the species. You will test that hypothesis here. To do this, you will do a pairs permutation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-val = 0.0\n"
     ]
    }
   ],
   "source": [
    "# Initialize array of replicates: perm_replicates\n",
    "perm_replicates = np.empty(10000)\n",
    "\n",
    "# Draw replicates\n",
    "for i in range(10000):\n",
    "    # Permute parent beak depths\n",
    "    bd_parent_permuted = np.random.permutation(bd_parent_scandens)\n",
    "    perm_replicates[i] = heritability(bd_parent_permuted,\n",
    "                                      bd_offspring_scandens)\n",
    "\n",
    "# Compute p-value: p\n",
    "p = np.sum(perm_replicates >= heritability_scandens) / len(perm_replicates)\n",
    "\n",
    "# Print the p-value\n",
    "print('p-val =', p)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You get a p-value of zero, which means that none of the 10,000 permutation pairs replicates you drew had a heritability high enough to match that which was observed. This strongly suggests that beak depth is heritable in G. scandens, just not as much as in G. fortis. If you like, you can plot a histogram of the heritability replicates to get a feel for how extreme of a value of heritability you might expect by chance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
